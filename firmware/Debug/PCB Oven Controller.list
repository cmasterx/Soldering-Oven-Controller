
PCB Oven Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008f78  08008f78  00018f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fec  08008fec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff4  08008ff4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f1c  20000010  0800900c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f2c  0800900c  00024f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027784  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005112  00000000  00000000  000477c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  0004c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002018  00000000  00000000  0004eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007f9a  00000000  00000000  00050af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002817b  00000000  00000000  00058a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab833  00000000  00000000  00080c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009158  00000000  00000000  0012c490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f60 	.word	0x08008f60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08008f60 	.word	0x08008f60

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 feae 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f82c 	bl	8000548 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fab8 	bl	8000a64 <_ZL12MX_GPIO_Initv>
  MX_IWDG_Init();
 80004f4:	f000 f91e 	bl	8000734 <_ZL12MX_IWDG_Initv>
  MX_RTC_Init();
 80004f8:	f000 f93c 	bl	8000774 <_ZL11MX_RTC_Initv>
  MX_I2C1_Init();
 80004fc:	f000 f8b2 	bl	8000664 <_ZL12MX_I2C1_Initv>
  MX_SDIO_SD_Init();
 8000500:	f000 f962 	bl	80007c8 <_ZL15MX_SDIO_SD_Initv>
  MX_CRC_Init();
 8000504:	f000 f896 	bl	8000634 <_ZL11MX_CRC_Initv>
  MX_TIM2_Init();
 8000508:	f000 f9ba 	bl	8000880 <_ZL12MX_TIM2_Initv>
  MX_FATFS_Init();
 800050c:	f005 fa90 	bl	8005a30 <MX_FATFS_Init>
  MX_I2C3_Init();
 8000510:	f000 f8dc 	bl	80006cc <_ZL12MX_I2C3_Initv>
  MX_SPI1_Init();
 8000514:	f000 f978 	bl	8000808 <_ZL12MX_SPI1_Initv>
  MX_USB_OTG_FS_HCD_Init();
 8000518:	f000 fa7e 	bl	8000a18 <_ZL22MX_USB_OTG_FS_HCD_Initv>
  MX_USART1_UART_Init();
 800051c:	f000 fa4e 	bl	80009bc <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f005 fd5c 	bl	8005fdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <main+0x58>)
 8000526:	2100      	movs	r1, #0
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <main+0x5c>)
 800052a:	f005 fdd8 	bl	80060de <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <main+0x60>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f005 fd98 	bl	8006068 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x54>
 800053a:	bf00      	nop
 800053c:	08008f9c 	.word	0x08008f9c
 8000540:	08000af9 	.word	0x08000af9
 8000544:	20000574 	.word	0x20000574

08000548 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f008 fcfa 	bl	8008f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b2e      	ldr	r3, [pc, #184]	; (800062c <_Z18SystemClock_Configv+0xe4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <_Z18SystemClock_Configv+0xe4>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <_Z18SystemClock_Configv+0xe4>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <_Z18SystemClock_Configv+0xe8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <_Z18SystemClock_Configv+0xe8>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <_Z18SystemClock_Configv+0xe8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005a4:	2309      	movs	r3, #9
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005bc:	2319      	movs	r3, #25
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 384;
 80005c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005ca:	2308      	movs	r3, #8
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fbb2 	bl	8001d3c <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80005e8:	f000 faa0 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2103      	movs	r1, #3
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fe0f 	bl	800222c <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800061e:	f000 fa85 	bl	8000b2c <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <_ZL11MX_CRC_Initv+0x28>)
 800063a:	4a09      	ldr	r2, [pc, #36]	; (8000660 <_ZL11MX_CRC_Initv+0x2c>)
 800063c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <_ZL11MX_CRC_Initv+0x28>)
 8000640:	f000 ff4a 	bl	80014d8 <HAL_CRC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	bf14      	ite	ne
 800064a:	2301      	movne	r3, #1
 800064c:	2300      	moveq	r3, #0
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8000654:	f000 fa6a 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000002c 	.word	0x2000002c
 8000660:	40023000 	.word	0x40023000

08000664 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <_ZL12MX_I2C1_Initv+0x60>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000670:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <_ZL12MX_I2C1_Initv+0x64>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <_ZL12MX_I2C1_Initv+0x5c>)
 80006a2:	f001 f9c5 	bl	8001a30 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	bf14      	ite	ne
 80006ac:	2301      	movne	r3, #1
 80006ae:	2300      	moveq	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80006b6:	f000 fa39 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000034 	.word	0x20000034
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <_ZL12MX_I2C3_Initv+0x60>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <_ZL12MX_I2C3_Initv+0x64>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <_ZL12MX_I2C3_Initv+0x5c>)
 800070a:	f001 f991 	bl	8001a30 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800071e:	f000 fa05 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000088 	.word	0x20000088
 800072c:	40005c00 	.word	0x40005c00
 8000730:	000186a0 	.word	0x000186a0

08000734 <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <_ZL12MX_IWDG_Initv+0x38>)
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <_ZL12MX_IWDG_Initv+0x3c>)
 800073c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <_ZL12MX_IWDG_Initv+0x38>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <_ZL12MX_IWDG_Initv+0x38>)
 8000746:	f640 72ff 	movw	r2, #4095	; 0xfff
 800074a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <_ZL12MX_IWDG_Initv+0x38>)
 800074e:	f001 fab3 	bl	8001cb8 <HAL_IWDG_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	bf14      	ite	ne
 8000758:	2301      	movne	r3, #1
 800075a:	2300      	moveq	r3, #0
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <_ZL12MX_IWDG_Initv+0x32>
  {
    Error_Handler();
 8000762:	f000 f9e3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000dc 	.word	0x200000dc
 8000770:	40003000 	.word	0x40003000

08000774 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <_ZL11MX_RTC_Initv+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 8000786:	227f      	movs	r2, #127	; 0x7f
 8000788:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <_ZL11MX_RTC_Initv+0x4c>)
 80007a4:	f002 f844 	bl	8002830 <HAL_RTC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZL11MX_RTC_Initv+0x48>
  {
    Error_Handler();
 80007b8:	f000 f9b8 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000e8 	.word	0x200000e8
 80007c4:	40002800 	.word	0x40002800

080007c8 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <_ZL15MX_SDIO_SD_Initv+0x3c>)
 80007d0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <_ZL15MX_SDIO_SD_Initv+0x38>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000108 	.word	0x20000108
 8000804:	40012c00 	.word	0x40012c00

08000808 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 800080e:	4a1b      	ldr	r2, [pc, #108]	; (800087c <_ZL12MX_SPI1_Initv+0x74>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <_ZL12MX_SPI1_Initv+0x70>)
 800085a:	f002 ff79 	bl	8003750 <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800086e:	f000 f95d 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000018c 	.word	0x2000018c
 800087c:	40013000 	.word	0x40013000

08000880 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b0:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80008b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b8:	4b3f      	ldr	r3, [pc, #252]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008c4:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d2:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d8:	4837      	ldr	r0, [pc, #220]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80008da:	f002 ffc2 	bl	8003862 <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80008ee:	f000 f91d 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fc:	4619      	mov	r1, r3
 80008fe:	482e      	ldr	r0, [pc, #184]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 8000900:	f003 fa84 	bl	8003e0c <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	bf14      	ite	ne
 800090a:	2301      	movne	r3, #1
 800090c:	2300      	moveq	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000914:	f000 f90a 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000918:	4827      	ldr	r0, [pc, #156]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 800091a:	f003 f853 	bl	80039c4 <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800092e:	f000 f8fd 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4619      	mov	r1, r3
 8000940:	481d      	ldr	r0, [pc, #116]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 8000942:	f003 fdf9 	bl	8004538 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000956:	f000 f8e9 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	4619      	mov	r1, r3
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 8000972:	f003 f989 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000986:	f000 f8d1 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2208      	movs	r2, #8
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 8000992:	f003 f979 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 80009a6:	f000 f8c1 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <_ZL12MX_TIM2_Initv+0x138>)
 80009ac:	f000 facc 	bl	8000f48 <HAL_TIM_MspPostInit>

}
 80009b0:	bf00      	nop
 80009b2:	3738      	adds	r7, #56	; 0x38
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200001e4 	.word	0x200001e4

080009bc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <_ZL19MX_USART1_UART_Initv+0x58>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <_ZL19MX_USART1_UART_Initv+0x54>)
 80009f4:	f003 fe22 	bl	800463c <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf14      	ite	ne
 80009fe:	2301      	movne	r3, #1
 8000a00:	2300      	moveq	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000a08:	f000 f890 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000022c 	.word	0x2000022c
 8000a14:	40011000 	.word	0x40011000

08000a18 <_ZL22MX_USB_OTG_FS_HCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a22:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000a42:	4807      	ldr	r0, [pc, #28]	; (8000a60 <_ZL22MX_USB_OTG_FS_HCD_Initv+0x48>)
 8000a44:	f000 ff92 	bl	800196c <HAL_HCD_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf14      	ite	ne
 8000a4e:	2301      	movne	r3, #1
 8000a50:	2300      	moveq	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <_ZL22MX_USB_OTG_FS_HCD_Initv+0x44>
  {
    Error_Handler();
 8000a58:	f000 f868 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000270 	.word	0x20000270

08000a64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <_ZL12MX_GPIO_Initv+0x8c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ace:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <_ZL12MX_GPIO_Initv+0x90>)
 8000ae4:	f000 fda6 	bl	8001634 <HAL_GPIO_Init>

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f005 fb7e 	bl	8006202 <osDelay>
 8000b06:	e7fb      	b.n	8000b00 <_Z16StartDefaultTaskPv+0x8>

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f000 fbb7 	bl	800128c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40014000 	.word	0x40014000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x54>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_MspInit+0x54>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x54>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_MspInit+0x54>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_MspInit+0x54>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_MspInit+0x54>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 fc81 	bl	8001484 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_CRC_MspInit+0x3c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10d      	bne.n	8000bbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_CRC_MspInit+0x40>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HAL_CRC_MspInit+0x40>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_CRC_MspInit+0x40>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40023000 	.word	0x40023000
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a42      	ldr	r2, [pc, #264]	; (8000cfc <HAL_I2C_MspInit+0x128>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12d      	bne.n	8000c52 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a40      	ldr	r2, [pc, #256]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c18:	2312      	movs	r3, #18
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c24:	2304      	movs	r3, #4
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4835      	ldr	r0, [pc, #212]	; (8000d04 <HAL_I2C_MspInit+0x130>)
 8000c30:	f000 fd00 	bl	8001634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c42:	6413      	str	r3, [r2, #64]	; 0x40
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000c50:	e050      	b.n	8000cf4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a2c      	ldr	r2, [pc, #176]	; (8000d08 <HAL_I2C_MspInit+0x134>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d14b      	bne.n	8000cf4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4816      	ldr	r0, [pc, #88]	; (8000d0c <HAL_I2C_MspInit+0x138>)
 8000cb2:	f000 fcbf 	bl	8001634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <HAL_I2C_MspInit+0x130>)
 8000cd4:	f000 fcae 	bl	8001634 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000ce2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_I2C_MspInit+0x12c>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
}
 8000cf4:	bf00      	nop
 8000cf6:	3730      	adds	r7, #48	; 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40005c00 	.word	0x40005c00
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <HAL_RTC_MspInit+0x50>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d111      	bne.n	8000d58 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d34:	2302      	movs	r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d3c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fc84 	bl	8002650 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d4e:	f7ff feed 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_RTC_MspInit+0x54>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40002800 	.word	0x40002800
 8000d64:	42470e3c 	.word	0x42470e3c

08000d68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_SD_MspInit+0xc0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d14a      	bne.n	8000e20 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_SD_MspInit+0xc4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dde:	2340      	movs	r3, #64	; 0x40
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000dee:	230c      	movs	r3, #12
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <HAL_SD_MspInit+0xc8>)
 8000dfa:	f000 fc1b 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7;
 8000dfe:	f248 0380 	movw	r3, #32896	; 0x8080
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e10:	230c      	movs	r3, #12
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	; (8000e34 <HAL_SD_MspInit+0xcc>)
 8000e1c:	f000 fc0a 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400

08000e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <HAL_SPI_MspInit+0xc0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d149      	bne.n	8000eee <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a26      	ldr	r2, [pc, #152]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_SPI_MspInit+0xc4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000eae:	23a0      	movs	r3, #160	; 0xa0
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <HAL_SPI_MspInit+0xc8>)
 8000eca:	f000 fbb3 	bl	8001634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_SPI_MspInit+0xcc>)
 8000eea:	f000 fba3 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020400 	.word	0x40020400

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f18:	d10d      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_TIM_Base_MspInit+0x3c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_TIM_Base_MspInit+0x3c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_TIM_Base_MspInit+0x3c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f68:	d11d      	bne.n	8000fa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_TIM_MspPostInit+0x68>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_TIM_MspPostInit+0x68>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_TIM_MspPostInit+0x68>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000f86:	2305      	movs	r3, #5
 8000f88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <HAL_TIM_MspPostInit+0x6c>)
 8000fa2:	f000 fb47 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_UART_MspInit+0x84>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12c      	bne.n	8001034 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_UART_MspInit+0x88>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_UART_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001012:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001024:	2307      	movs	r3, #7
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_UART_MspInit+0x8c>)
 8001030:	f000 fb00 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40011000 	.word	0x40011000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001068:	d132      	bne.n	80010d0 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001086:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001098:	230a      	movs	r3, #10
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <HAL_HCD_MspInit+0x94>)
 80010a4:	f000 fac6 	bl	8001634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 80010ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b2:	6353      	str	r3, [r2, #52]	; 0x34
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6453      	str	r3, [r2, #68]	; 0x44
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_HCD_MspInit+0x90>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2018      	movs	r0, #24
 80010f6:	f000 f9c5 	bl	8001484 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80010fa:	2018      	movs	r0, #24
 80010fc:	f000 f9de 	bl	80014bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_InitTick+0xa0>)
 8001106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_InitTick+0xa0>)
 800110a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110e:	6453      	str	r3, [r2, #68]	; 0x44
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_InitTick+0xa0>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800111c:	f107 0210 	add.w	r2, r7, #16
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fa60 	bl	80025ec <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800112c:	f001 fa4a 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8001130:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001134:	4a13      	ldr	r2, [pc, #76]	; (8001184 <HAL_InitTick+0xa4>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	3b01      	subs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_InitTick+0xa8>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_InitTick+0xac>)
 8001144:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_InitTick+0xa8>)
 8001148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800114c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_InitTick+0xa8>)
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_InitTick+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_InitTick+0xa8>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_InitTick+0xa8>)
 8001162:	f002 fb7e 	bl	8003862 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d104      	bne.n	8001176 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <HAL_InitTick+0xa8>)
 800116e:	f002 fbc7 	bl	8003900 <HAL_TIM_Base_Start_IT>
 8001172:	4603      	mov	r3, r0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3730      	adds	r7, #48	; 0x30
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	431bde83 	.word	0x431bde83
 8001188:	20000578 	.word	0x20000578
 800118c:	40014000 	.word	0x40014000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80011c2:	f002 fc58 	bl	8003a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000578 	.word	0x20000578

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001210:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800121e:	f7ff ffd7 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f007 fe63 	bl	8008eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff f95d 	bl	80004e4 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001238:	08008ffc 	.word	0x08008ffc
  ldr r2, =_sbss
 800123c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001240:	20004f2c 	.word	0x20004f2c

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f8fc 	bl	800146e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f7ff ff32 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fc5c 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200005c0 	.word	0x200005c0

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200005c0 	.word	0x200005c0

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff4c 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001496:	f7ff ff61 	bl	800135c <__NVIC_GetPriorityGrouping>
 800149a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	6978      	ldr	r0, [r7, #20]
 80014a2:	f7ff ffb1 	bl	8001408 <NVIC_EncodePriority>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff80 	bl	80013b4 <__NVIC_SetPriority>
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff54 	bl	8001378 <__NVIC_EnableIRQ>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	795b      	ldrb	r3, [r3, #5]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fb48 	bl	8000b90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Start_IT+0x26>
 8001532:	2302      	movs	r3, #2
 8001534:	e040      	b.n	80015b8 <HAL_DMA_Start_IT+0xa8>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d12f      	bne.n	80015aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2202      	movs	r2, #2
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f83a 	bl	80015d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	223f      	movs	r2, #63	; 0x3f
 800156a:	409a      	lsls	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0216 	orr.w	r2, r2, #22
 800157e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0208 	orr.w	r2, r2, #8
 8001596:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e005      	b.n	80015b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
 80015b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b40      	cmp	r3, #64	; 0x40
 8001604:	d108      	bne.n	8001618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001616:	e007      	b.n	8001628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e159      	b.n	8001904 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8148 	bne.w	80018fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	2b02      	cmp	r3, #2
 8001684:	d130      	bne.n	80016e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a2 	beq.w	80018fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_GPIO_Init+0x2e8>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_GPIO_Init+0x2e8>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b54      	ldr	r3, [pc, #336]	; (800191c <HAL_GPIO_Init+0x2e8>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_GPIO_Init+0x2ec>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a49      	ldr	r2, [pc, #292]	; (8001924 <HAL_GPIO_Init+0x2f0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0x202>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x2f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x1fe>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a47      	ldr	r2, [pc, #284]	; (800192c <HAL_GPIO_Init+0x2f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x1fa>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a46      	ldr	r2, [pc, #280]	; (8001930 <HAL_GPIO_Init+0x2fc>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x1f6>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a45      	ldr	r2, [pc, #276]	; (8001934 <HAL_GPIO_Init+0x300>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x1f2>
 8001822:	2304      	movs	r3, #4
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x204>
 8001826:	2307      	movs	r3, #7
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x204>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x204>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x204>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x204>
 8001836:	2300      	movs	r3, #0
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001848:	4935      	ldr	r1, [pc, #212]	; (8001920 <HAL_GPIO_Init+0x2ec>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_GPIO_Init+0x304>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187a:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <HAL_GPIO_Init+0x304>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x304>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ce:	4a1a      	ldr	r2, [pc, #104]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x304>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	f67f aea2 	bls.w	8001650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40013c00 	.word	0x40013c00

0800193c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e001      	b.n	800195e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b08f      	sub	sp, #60	; 0x3c
 8001970:	af0a      	add	r7, sp, #40	; 0x28
 8001972:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e054      	b.n	8001a28 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fb55 	bl	8001048 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fe74 	bl	80056aa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	687e      	ldr	r6, [r7, #4]
 80019ca:	466d      	mov	r5, sp
 80019cc:	f106 0410 	add.w	r4, r6, #16
 80019d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019e0:	1d33      	adds	r3, r6, #4
 80019e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f003 fdff 	bl	80055e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fe6b 	bl	80056cc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	687e      	ldr	r6, [r7, #4]
 80019fe:	466d      	mov	r5, sp
 8001a00:	f106 0410 	add.w	r4, r6, #16
 8001a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a14:	1d33      	adds	r3, r6, #4
 8001a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f003 ff49 	bl	80058b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e12b      	b.n	8001c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff f8bc 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2224      	movs	r2, #36	; 0x24
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a94:	f000 fd82 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8001a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a81      	ldr	r2, [pc, #516]	; (8001ca4 <HAL_I2C_Init+0x274>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d807      	bhi.n	8001ab4 <HAL_I2C_Init+0x84>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a80      	ldr	r2, [pc, #512]	; (8001ca8 <HAL_I2C_Init+0x278>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e006      	b.n	8001ac2 <HAL_I2C_Init+0x92>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a7d      	ldr	r2, [pc, #500]	; (8001cac <HAL_I2C_Init+0x27c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	bf94      	ite	ls
 8001abc:	2301      	movls	r3, #1
 8001abe:	2300      	movhi	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0e7      	b.n	8001c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4a78      	ldr	r2, [pc, #480]	; (8001cb0 <HAL_I2C_Init+0x280>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a6a      	ldr	r2, [pc, #424]	; (8001ca4 <HAL_I2C_Init+0x274>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d802      	bhi.n	8001b04 <HAL_I2C_Init+0xd4>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3301      	adds	r3, #1
 8001b02:	e009      	b.n	8001b18 <HAL_I2C_Init+0xe8>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_I2C_Init+0x284>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	3301      	adds	r3, #1
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	495c      	ldr	r1, [pc, #368]	; (8001ca4 <HAL_I2C_Init+0x274>)
 8001b34:	428b      	cmp	r3, r1
 8001b36:	d819      	bhi.n	8001b6c <HAL_I2C_Init+0x13c>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e59      	subs	r1, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <HAL_I2C_Init+0x138>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e59      	subs	r1, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b60:	3301      	adds	r3, #1
 8001b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b66:	e051      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001b68:	2304      	movs	r3, #4
 8001b6a:	e04f      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d111      	bne.n	8001b98 <HAL_I2C_Init+0x168>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e012      	b.n	8001bbe <HAL_I2C_Init+0x18e>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e58      	subs	r0, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	0099      	lsls	r1, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Init+0x196>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e022      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <HAL_I2C_Init+0x1bc>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1e58      	subs	r0, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6859      	ldr	r1, [r3, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	440b      	add	r3, r1
 8001bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_Init+0x1dc>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	0099      	lsls	r1, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	6809      	ldr	r1, [r1, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6911      	ldr	r1, [r2, #16]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68d2      	ldr	r2, [r2, #12]
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	000186a0 	.word	0x000186a0
 8001ca8:	001e847f 	.word	0x001e847f
 8001cac:	003d08ff 	.word	0x003d08ff
 8001cb0:	431bde83 	.word	0x431bde83
 8001cb4:	10624dd3 	.word	0x10624dd3

08001cb8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e034      	b.n	8001d34 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f245 5255 	movw	r2, #21845	; 0x5555
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6892      	ldr	r2, [r2, #8]
 8001cf0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001cf2:	f7ff fadf 	bl	80012b4 <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cf8:	e00f      	b.n	8001d1a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001cfa:	f7ff fadb 	bl	80012b4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b31      	cmp	r3, #49	; 0x31
 8001d06:	d908      	bls.n	8001d1a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e00c      	b.n	8001d34 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e8      	bne.n	8001cfa <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e267      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d075      	beq.n	8001e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d5a:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d00c      	beq.n	8001d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d66:	4b85      	ldr	r3, [pc, #532]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d112      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d72:	4b82      	ldr	r3, [pc, #520]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	4b7e      	ldr	r3, [pc, #504]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d05b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x108>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d157      	bne.n	8001e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e242      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_OscConfig+0x74>
 8001da2:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a75      	ldr	r2, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x98>
 8001dba:	4b70      	ldr	r3, [pc, #448]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6f      	ldr	r2, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6c      	ldr	r2, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001dd4:	4b69      	ldr	r3, [pc, #420]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a68      	ldr	r2, [pc, #416]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b66      	ldr	r3, [pc, #408]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a65      	ldr	r2, [pc, #404]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa5e 	bl	80012b4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fa5a 	bl	80012b4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e207      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xc0>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fa4a 	bl	80012b4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fa46 	bl	80012b4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1f3      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0xe8>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x152>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c7      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4937      	ldr	r1, [pc, #220]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x244>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f9ff 	bl	80012b4 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff f9fb 	bl	80012b4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1a8      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4925      	ldr	r1, [pc, #148]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_RCC_OscConfig+0x244>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f9de 	bl	80012b4 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff f9da 	bl	80012b4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e187      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d036      	beq.n	8001f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0x248>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7ff f9be 	bl	80012b4 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f9ba 	bl	80012b4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e167      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_OscConfig+0x240>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x200>
 8001f5a:	e01b      	b.n	8001f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0x248>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff f9a7 	bl	80012b4 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	e00e      	b.n	8001f88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f9a3 	bl	80012b4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d907      	bls.n	8001f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e150      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470000 	.word	0x42470000
 8001f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	4b88      	ldr	r3, [pc, #544]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8001f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ea      	bne.n	8001f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8097 	beq.w	80020d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b7d      	ldr	r3, [pc, #500]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a7c      	ldr	r2, [pc, #496]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b7a      	ldr	r3, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b77      	ldr	r3, [pc, #476]	; (80021b0 <HAL_RCC_OscConfig+0x474>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fde:	4b74      	ldr	r3, [pc, #464]	; (80021b0 <HAL_RCC_OscConfig+0x474>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a73      	ldr	r2, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x474>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7ff f963 	bl	80012b4 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7ff f95f 	bl	80012b4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e10c      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_RCC_OscConfig+0x474>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x2ea>
 8002018:	4b64      	ldr	r3, [pc, #400]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a63      	ldr	r2, [pc, #396]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x324>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x30c>
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a5e      	ldr	r2, [pc, #376]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
 800203a:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a5b      	ldr	r2, [pc, #364]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0x324>
 8002048:	4b58      	ldr	r3, [pc, #352]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6713      	str	r3, [r2, #112]	; 0x70
 8002054:	4b55      	ldr	r3, [pc, #340]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a54      	ldr	r2, [pc, #336]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 800205a:	f023 0304 	bic.w	r3, r3, #4
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d015      	beq.n	8002094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f924 	bl	80012b4 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff f920 	bl	80012b4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0cb      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0ee      	beq.n	8002070 <HAL_RCC_OscConfig+0x334>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff f90e 	bl	80012b4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff f90a 	bl	80012b4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0b5      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1ee      	bne.n	800209c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b39      	ldr	r3, [pc, #228]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	4a38      	ldr	r2, [pc, #224]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a1 	beq.w	800221c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d05c      	beq.n	80021a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d141      	bne.n	8002172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_OscConfig+0x478>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff f8de 	bl	80012b4 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fc:	f7ff f8da 	bl	80012b4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e087      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	3b01      	subs	r3, #1
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	491b      	ldr	r1, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x478>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff f8b3 	bl	80012b4 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff f8af 	bl	80012b4 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e05c      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x416>
 8002170:	e054      	b.n	800221c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_RCC_OscConfig+0x478>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff f89c 	bl	80012b4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff f898 	bl	80012b4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e045      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_OscConfig+0x470>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x444>
 800219e:	e03d      	b.n	800221c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e038      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40007000 	.word	0x40007000
 80021b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x4ec>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d028      	beq.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d121      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d11a      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d111      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	3b01      	subs	r3, #1
 8002202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0cc      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d90c      	bls.n	8002268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b8      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	494d      	ldr	r1, [pc, #308]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d044      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d119      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e067      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe ffca 	bl	80012b4 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7fe ffc6 	bl	80012b4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d20c      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e032      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4916      	ldr	r1, [pc, #88]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 f821 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	490a      	ldr	r1, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	5ccb      	ldrb	r3, [r1, r3]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fe84 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	40023800 	.word	0x40023800
 80023ec:	08008fc0 	.word	0x08008fc0
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023fc:	b090      	sub	sp, #64	; 0x40
 80023fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
 8002404:	2300      	movs	r3, #0
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_GetSysClockFreq+0x180>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d00d      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x40>
 800241c:	2b08      	cmp	r3, #8
 800241e:	f200 80a1 	bhi.w	8002564 <HAL_RCC_GetSysClockFreq+0x16c>
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x34>
 8002426:	2b04      	cmp	r3, #4
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x3a>
 800242a:	e09b      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_GetSysClockFreq+0x184>)
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002430:	e09b      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002432:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_GetSysClockFreq+0x188>)
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002436:	e098      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002438:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <HAL_RCC_GetSysClockFreq+0x180>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002442:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_RCC_GetSysClockFreq+0x180>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d028      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244e:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_RCC_GetSysClockFreq+0x180>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	2200      	movs	r2, #0
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	627a      	str	r2, [r7, #36]	; 0x24
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002460:	2100      	movs	r1, #0
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_GetSysClockFreq+0x188>)
 8002464:	fb03 f201 	mul.w	r2, r3, r1
 8002468:	2300      	movs	r3, #0
 800246a:	fb00 f303 	mul.w	r3, r0, r3
 800246e:	4413      	add	r3, r2
 8002470:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_RCC_GetSysClockFreq+0x188>)
 8002472:	fba0 1202 	umull	r1, r2, r0, r2
 8002476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002478:	460a      	mov	r2, r1
 800247a:	62ba      	str	r2, [r7, #40]	; 0x28
 800247c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247e:	4413      	add	r3, r2
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002484:	2200      	movs	r2, #0
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	61fa      	str	r2, [r7, #28]
 800248a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800248e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002492:	f7fd fea5 	bl	80001e0 <__aeabi_uldivmod>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4613      	mov	r3, r2
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249e:	e053      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a0:	4b35      	ldr	r3, [pc, #212]	; (8002578 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	2200      	movs	r2, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	617a      	str	r2, [r7, #20]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024b2:	f04f 0b00 	mov.w	fp, #0
 80024b6:	4652      	mov	r2, sl
 80024b8:	465b      	mov	r3, fp
 80024ba:	f04f 0000 	mov.w	r0, #0
 80024be:	f04f 0100 	mov.w	r1, #0
 80024c2:	0159      	lsls	r1, r3, #5
 80024c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c8:	0150      	lsls	r0, r2, #5
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	ebb2 080a 	subs.w	r8, r2, sl
 80024d2:	eb63 090b 	sbc.w	r9, r3, fp
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024ea:	ebb2 0408 	subs.w	r4, r2, r8
 80024ee:	eb63 0509 	sbc.w	r5, r3, r9
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	00eb      	lsls	r3, r5, #3
 80024fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002500:	00e2      	lsls	r2, r4, #3
 8002502:	4614      	mov	r4, r2
 8002504:	461d      	mov	r5, r3
 8002506:	eb14 030a 	adds.w	r3, r4, sl
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	eb45 030b 	adc.w	r3, r5, fp
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800251e:	4629      	mov	r1, r5
 8002520:	028b      	lsls	r3, r1, #10
 8002522:	4621      	mov	r1, r4
 8002524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002528:	4621      	mov	r1, r4
 800252a:	028a      	lsls	r2, r1, #10
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002532:	2200      	movs	r2, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	60fa      	str	r2, [r7, #12]
 8002538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800253c:	f7fd fe50 	bl	80001e0 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4613      	mov	r3, r2
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_GetSysClockFreq+0x180>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	3301      	adds	r3, #1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetSysClockFreq+0x184>)
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800256c:	4618      	mov	r0, r3
 800256e:	3740      	adds	r7, #64	; 0x40
 8002570:	46bd      	mov	sp, r7
 8002572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	00f42400 	.word	0x00f42400
 8002580:	017d7840 	.word	0x017d7840

08002584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCC_GetHCLKFreq+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff0 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0a9b      	lsrs	r3, r3, #10
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	08008fd0 	.word	0x08008fd0

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffdc 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0b5b      	lsrs	r3, r3, #13
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	08008fd0 	.word	0x08008fd0

080025ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	220f      	movs	r2, #15
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_GetClockConfig+0x5c>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCC_GetClockConfig+0x5c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_RCC_GetClockConfig+0x5c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	08db      	lsrs	r3, r3, #3
 8002626:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_RCC_GetClockConfig+0x60>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0207 	and.w	r2, r3, #7
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40023c00 	.word	0x40023c00

08002650 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002674:	2b00      	cmp	r3, #0
 8002676:	d038      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002678:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800267e:	f7fe fe19 	bl	80012b4 <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002686:	f7fe fe15 	bl	80012b4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0bd      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002698:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	495a      	ldr	r1, [pc, #360]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fdf6 	bl	80012b4 <HAL_GetTick>
 80026c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026cc:	f7fe fdf2 	bl	80012b4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e09a      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8083 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	4b48      	ldr	r3, [pc, #288]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4a47      	ldr	r2, [pc, #284]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
 8002708:	4b45      	ldr	r3, [pc, #276]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002714:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a42      	ldr	r2, [pc, #264]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fdc8 	bl	80012b4 <HAL_GetTick>
 8002724:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002728:	f7fe fdc4 	bl	80012b4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e06c      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800273a:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002746:	4b36      	ldr	r3, [pc, #216]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d02f      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	d028      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002764:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800276e:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800277a:	4a29      	ldr	r2, [pc, #164]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d114      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fd92 	bl	80012b4 <HAL_GetTick>
 8002790:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fd8e 	bl	80012b4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e034      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ee      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	4911      	ldr	r1, [pc, #68]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
 80027de:	e005      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ea:	6093      	str	r3, [r2, #8]
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	4909      	ldr	r1, [pc, #36]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7d1a      	ldrb	r2, [r3, #20]
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002810:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	42470068 	.word	0x42470068
 8002820:	40023800 	.word	0x40023800
 8002824:	40007000 	.word	0x40007000
 8002828:	42470e40 	.word	0x42470e40
 800282c:	424711e0 	.word	0x424711e0

08002830 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e066      	b.n	8002914 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7f5b      	ldrb	r3, [r3, #29]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fa5a 	bl	8000d10 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	22ca      	movs	r2, #202	; 0xca
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2253      	movs	r2, #83	; 0x53
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f87a 	bl	800296c <RTC_EnterInitMode>
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12c      	bne.n	80028dc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002894:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68d2      	ldr	r2, [r2, #12]
 80028bc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6919      	ldr	r1, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f881 	bl	80029da <RTC_ExitInitMode>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d113      	bne.n	800290a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002936:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002938:	f7fe fcbc 	bl	80012b4 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800293e:	e009      	b.n	8002954 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002940:	f7fe fcb8 	bl	80012b4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800294e:	d901      	bls.n	8002954 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e007      	b.n	8002964 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ee      	beq.n	8002940 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d122      	bne.n	80029d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002998:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800299a:	f7fe fc8b 	bl	80012b4 <HAL_GetTick>
 800299e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029a0:	e00c      	b.n	80029bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029a2:	f7fe fc87 	bl	80012b4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b0:	d904      	bls.n	80029bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <RTC_EnterInitMode+0x64>
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d1e8      	bne.n	80029a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff89 	bl	800291c <HAL_RTC_WaitForSynchro>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2204      	movs	r2, #4
 8002a14:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e022      	b.n	8002a7c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fe f98d 	bl	8000d68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2203      	movs	r2, #3
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f814 	bl	8002a84 <HAL_SD_InitCard>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00a      	b.n	8002a7c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af04      	add	r7, sp, #16
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002aa0:	2376      	movs	r3, #118	; 0x76
 8002aa2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681d      	ldr	r5, [r3, #0]
 8002aa8:	466c      	mov	r4, sp
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002abc:	4628      	mov	r0, r5
 8002abe:	f002 f87f 	bl	8004bc0 <SDIO_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e04f      	b.n	8002b74 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_SD_InitCard+0xf8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 f899 	bl	8004c16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_SD_InitCard+0xf8>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002aea:	2002      	movs	r0, #2
 8002aec:	f7fe fbee 	bl	80012cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fd77 	bl	80035e4 <SD_PowerON>
 8002af6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02e      	b.n	8002b74 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fc96 	bl	8003448 <SD_InitCard>
 8002b1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e01b      	b.n	8002b74 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 f8f8 	bl	8004d3a <SDMMC_CmdBlockLength>
 8002b4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00f      	beq.n	8002b72 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_SD_InitCard+0xfc>)
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7c:	422580a0 	.word	0x422580a0
 8002b80:	004005ff 	.word	0x004005ff

08002b84 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0c0      	b.n	8002d2e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 80b9 	bne.w	8002d2c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d907      	bls.n	8002bde <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0a7      	b.n	8002d2e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2203      	movs	r2, #3
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002c10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2200      	movs	r2, #0
 8002c18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3380      	adds	r3, #128	; 0x80
 8002c48:	4619      	mov	r1, r3
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	025b      	lsls	r3, r3, #9
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	f7fe fc5d 	bl	8001510 <HAL_DMA_Start_IT>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d017      	beq.n	8002c8c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e050      	b.n	8002d2e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d002      	beq.n	8002ca0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	025b      	lsls	r3, r3, #9
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	025b      	lsls	r3, r3, #9
 8002caa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002cac:	2390      	movs	r3, #144	; 0x90
 8002cae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f107 0210 	add.w	r2, r7, #16
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 f80b 	bl	8004ce2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d90a      	bls.n	8002ce8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2282      	movs	r2, #130	; 0x82
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 f86f 	bl	8004dc2 <SDMMC_CmdReadMultiBlock>
 8002ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002ce6:	e009      	b.n	8002cfc <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2281      	movs	r2, #129	; 0x81
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f002 f842 	bl	8004d7e <SDMMC_CmdReadSingleBlock>
 8002cfa:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d012      	beq.n	8002d28 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e002      	b.n	8002d2e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3730      	adds	r7, #48	; 0x30
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	08003333 	.word	0x08003333
 8002d3c:	080033a5 	.word	0x080033a5
 8002d40:	004005ff 	.word	0x004005ff
 8002d44:	4225858c 	.word	0x4225858c

08002d48 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	; 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0c5      	b.n	8002efc <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f040 80be 	bne.w	8002efa <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	441a      	add	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d907      	bls.n	8002da2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0ac      	b.n	8002efc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2203      	movs	r2, #3
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	4a4e      	ldr	r2, [pc, #312]	; (8002f04 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002dd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	2200      	movs	r2, #0
 8002ddc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d002      	beq.n	8002dec <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	025b      	lsls	r3, r3, #9
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d90a      	bls.n	8002e08 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22a0      	movs	r2, #160	; 0xa0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 f823 	bl	8004e4a <SDMMC_CmdWriteMultiBlock>
 8002e04:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002e06:	e009      	b.n	8002e1c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2290      	movs	r2, #144	; 0x90
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 fff6 	bl	8004e06 <SDMMC_CmdWriteSingleBlock>
 8002e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a39      	ldr	r2, [pc, #228]	; (8002f0c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e059      	b.n	8002efc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002e48:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3380      	adds	r3, #128	; 0x80
 8002e7e:	461a      	mov	r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	f7fe fb43 	bl	8001510 <HAL_DMA_Start_IT>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01c      	beq.n	8002eca <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002e9e:	f023 0302 	bic.w	r3, r3, #2
 8002ea2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e018      	b.n	8002efc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	025b      	lsls	r3, r3, #9
 8002ed4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ed6:	2390      	movs	r3, #144	; 0x90
 8002ed8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f107 0210 	add.w	r2, r7, #16
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fef6 	bl	8004ce2 <SDIO_ConfigData>

      return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3730      	adds	r7, #48	; 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	08003309 	.word	0x08003309
 8002f08:	080033a5 	.word	0x080033a5
 8002f0c:	004005ff 	.word	0x004005ff
 8002f10:	4225858c 	.word	0x4225858c

08002f14 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f36:	0f9b      	lsrs	r3, r3, #30
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f54:	0e1b      	lsrs	r3, r3, #24
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f88:	0d1b      	lsrs	r3, r3, #20
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa6:	0bdb      	lsrs	r3, r3, #15
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb8:	0b9b      	lsrs	r3, r3, #14
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fdc:	0b1b      	lsrs	r3, r3, #12
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d163      	bne.n	80030c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffc:	009a      	lsls	r2, r3, #2
 8002ffe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003002:	4013      	ands	r3, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003008:	0f92      	lsrs	r2, r2, #30
 800300a:	431a      	orrs	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003014:	0edb      	lsrs	r3, r3, #27
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	b2da      	uxtb	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003026:	0e1b      	lsrs	r3, r3, #24
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	b2da      	uxtb	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003038:	0d5b      	lsrs	r3, r3, #21
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	b2da      	uxtb	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	b2da      	uxtb	r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800305c:	0bdb      	lsrs	r3, r3, #15
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	b2da      	uxtb	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	7e1b      	ldrb	r3, [r3, #24]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	3302      	adds	r3, #2
 8003080:	2201      	movs	r2, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800308a:	fb03 f202 	mul.w	r2, r3, r2
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	7a1b      	ldrb	r3, [r3, #8]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	2201      	movs	r2, #1
 800309e:	409a      	lsls	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80030ac:	0a52      	lsrs	r2, r2, #9
 80030ae:	fb03 f202 	mul.w	r2, r3, r2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030bc:	661a      	str	r2, [r3, #96]	; 0x60
 80030be:	e031      	b.n	8003124 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d11d      	bne.n	8003104 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	431a      	orrs	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	3301      	adds	r3, #1
 80030e4:	029a      	lsls	r2, r3, #10
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	661a      	str	r2, [r3, #96]	; 0x60
 8003102:	e00f      	b.n	8003124 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_SD_GetCardCSD+0x344>)
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e09d      	b.n	8003260 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003128:	0b9b      	lsrs	r3, r3, #14
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	b2da      	uxtb	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313a:	09db      	lsrs	r3, r3, #7
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003142:	b2da      	uxtb	r2, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003152:	b2da      	uxtb	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	0fdb      	lsrs	r3, r3, #31
 800315e:	b2da      	uxtb	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	0f5b      	lsrs	r3, r3, #29
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	b2da      	uxtb	r2, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	0e9b      	lsrs	r3, r3, #26
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	b2da      	uxtb	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	0d9b      	lsrs	r3, r3, #22
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	b2da      	uxtb	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	0d5b      	lsrs	r3, r3, #21
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	0bdb      	lsrs	r3, r3, #15
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	0b9b      	lsrs	r3, r3, #14
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	0b5b      	lsrs	r3, r3, #13
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	0b1b      	lsrs	r3, r3, #12
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	0a9b      	lsrs	r3, r3, #10
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	b2da      	uxtb	r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324e:	b2da      	uxtb	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	004005ff 	.word	0x004005ff

08003270 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa10 	bl	8003700 <SD_SendStatus>
 80032e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	0a5b      	lsrs	r3, r3, #9
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80032fe:	693b      	ldr	r3, [r7, #16]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003324:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	2b82      	cmp	r3, #130	; 0x82
 8003346:	d111      	bne.n	800336c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fd9f 	bl	8004e90 <SDMMC_CmdStopTransfer>
 8003352:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff fdd4 	bl	8002f14 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0208 	bic.w	r2, r2, #8
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f240 523a 	movw	r2, #1338	; 0x53a
 8003384:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f002 fbc7 	bl	8005b28 <HAL_SD_RxCpltCallback>
#endif
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe f904 	bl	80015c0 <HAL_DMA_GetError>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d03e      	beq.n	800343c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d002      	beq.n	80033da <SD_DMAError+0x36>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d12d      	bne.n	8003436 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a19      	ldr	r2, [pc, #100]	; (8003444 <SD_DMAError+0xa0>)
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff ff62 	bl	80032c8 <HAL_SD_GetCardState>
 8003404:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d002      	beq.n	8003412 <SD_DMAError+0x6e>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d10a      	bne.n	8003428 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fd3a 	bl	8004e90 <SDMMC_CmdStopTransfer>
 800341c:	4602      	mov	r2, r0
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	431a      	orrs	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7ff fd6c 	bl	8002f14 <HAL_SD_ErrorCallback>
#endif
  }
}
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	004005ff 	.word	0x004005ff

08003448 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003448:	b5b0      	push	{r4, r5, r7, lr}
 800344a:	b094      	sub	sp, #80	; 0x50
 800344c:	af04      	add	r7, sp, #16
 800344e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003450:	2301      	movs	r3, #1
 8003452:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f001 fbea 	bl	8004c32 <SDIO_GetPowerState>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003464:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003468:	e0b8      	b.n	80035dc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	2b03      	cmp	r3, #3
 8003470:	d02f      	beq.n	80034d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fdd1 	bl	800501e <SDMMC_CmdSendCID>
 800347c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800347e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <SD_InitCard+0x40>
    {
      return errorstate;
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	e0a9      	b.n	80035dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fc14 	bl	8004cbc <SDIO_GetResponse>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2104      	movs	r1, #4
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 fc0b 	bl	8004cbc <SDIO_GetResponse>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2108      	movs	r1, #8
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fc02 	bl	8004cbc <SDIO_GetResponse>
 80034b8:	4602      	mov	r2, r0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	210c      	movs	r1, #12
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 fbf9 	bl	8004cbc <SDIO_GetResponse>
 80034ca:	4602      	mov	r2, r0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d00d      	beq.n	80034f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f107 020e 	add.w	r2, r7, #14
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fdd7 	bl	8005098 <SDMMC_CmdSetRelAdd>
 80034ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	e072      	b.n	80035dc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d036      	beq.n	800356c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80034fe:	89fb      	ldrh	r3, [r7, #14]
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f001 fda1 	bl	800505a <SDMMC_CmdSendCSD>
 8003518:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003522:	e05b      	b.n	80035dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fbc6 	bl	8004cbc <SDIO_GetResponse>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2104      	movs	r1, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fbbd 	bl	8004cbc <SDIO_GetResponse>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2108      	movs	r1, #8
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fbb4 	bl	8004cbc <SDIO_GetResponse>
 8003554:	4602      	mov	r2, r0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	210c      	movs	r1, #12
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fbab 	bl	8004cbc <SDIO_GetResponse>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2104      	movs	r1, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fba2 	bl	8004cbc <SDIO_GetResponse>
 8003578:	4603      	mov	r3, r0
 800357a:	0d1a      	lsrs	r2, r3, #20
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff fcce 	bl	8002f28 <HAL_SD_GetCardCSD>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003592:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003596:	e021      	b.n	80035dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	2200      	movs	r2, #0
 80035a4:	461c      	mov	r4, r3
 80035a6:	4615      	mov	r5, r2
 80035a8:	4622      	mov	r2, r4
 80035aa:	462b      	mov	r3, r5
 80035ac:	4608      	mov	r0, r1
 80035ae:	f001 fc91 	bl	8004ed4 <SDMMC_CmdSelDesel>
 80035b2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <SD_InitCard+0x176>
  {
    return errorstate;
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	e00e      	b.n	80035dc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681d      	ldr	r5, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	466c      	mov	r4, sp
 80035c6:	f103 0210 	add.w	r2, r3, #16
 80035ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80035cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035d0:	3304      	adds	r3, #4
 80035d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d4:	4628      	mov	r0, r5
 80035d6:	f001 faf3 	bl	8004bc0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3740      	adds	r7, #64	; 0x40
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bdb0      	pop	{r4, r5, r7, pc}

080035e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 fc8c 	bl	8004f1a <SDMMC_CmdGoIdleState>
 8003602:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <SD_PowerON+0x2a>
  {
    return errorstate;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	e072      	b.n	80036f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f001 fc9f 	bl	8004f56 <SDMMC_CmdOperCond>
 8003618:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fc75 	bl	8004f1a <SDMMC_CmdGoIdleState>
 8003630:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d004      	beq.n	8003642 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	e05b      	b.n	80036f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003646:	2b01      	cmp	r3, #1
 8003648:	d137      	bne.n	80036ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f001 fc9f 	bl	8004f94 <SDMMC_CmdAppCommand>
 8003656:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02d      	beq.n	80036ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800365e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003662:	e047      	b.n	80036f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fc92 	bl	8004f94 <SDMMC_CmdAppCommand>
 8003670:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <SD_PowerON+0x98>
    {
      return errorstate;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	e03b      	b.n	80036f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	491e      	ldr	r1, [pc, #120]	; (80036fc <SD_PowerON+0x118>)
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fca8 	bl	8004fd8 <SDMMC_CmdAppOperCommand>
 8003688:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003694:	e02e      	b.n	80036f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fb0d 	bl	8004cbc <SDIO_GetResponse>
 80036a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	0fdb      	lsrs	r3, r3, #31
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <SD_PowerON+0xcc>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <SD_PowerON+0xce>
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]

    count++;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3301      	adds	r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d802      	bhi.n	80036ca <SD_PowerON+0xe6>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0cc      	beq.n	8003664 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d902      	bls.n	80036da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80036d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d8:	e00c      	b.n	80036f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
 80036ea:	e002      	b.n	80036f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	c1100000 	.word	0xc1100000

08003700 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003710:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003714:	e018      	b.n	8003748 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f001 fcd9 	bl	80050da <SDMMC_CmdSendStatus>
 8003728:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	e009      	b.n	8003748 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fabe 	bl	8004cbc <SDIO_GetResponse>
 8003740:	4602      	mov	r2, r0
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07b      	b.n	800385a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003772:	d009      	beq.n	8003788 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	61da      	str	r2, [r3, #28]
 800377a:	e005      	b.n	8003788 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fb48 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	ea42 0103 	orr.w	r1, r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	f003 0104 	and.w	r1, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f003 0210 	and.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003848:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e041      	b.n	80038f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fd fb3d 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f000 fba3 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d001      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e044      	b.n	80039a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x6c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d013      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x6c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x6c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x6c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <HAL_TIM_Base_Start_IT+0xbc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x6c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d111      	bne.n	8003990 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b06      	cmp	r3, #6
 800397c:	d010      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	e007      	b.n	80039a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40014000 	.word	0x40014000

080039c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f839 	bl	8003a62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 faf2 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d122      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d11b      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0202 	mvn.w	r2, #2
 8003aa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fa78 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003abe:	e005      	b.n	8003acc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa6a 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa7b 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d122      	bne.n	8003b26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d11b      	bne.n	8003b26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f06f 0204 	mvn.w	r2, #4
 8003af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fa4e 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003b12:	e005      	b.n	8003b20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fa40 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa51 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d122      	bne.n	8003b7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d11b      	bne.n	8003b7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f06f 0208 	mvn.w	r2, #8
 8003b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fa24 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003b66:	e005      	b.n	8003b74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa16 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa27 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d122      	bne.n	8003bce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d11b      	bne.n	8003bce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f06f 0210 	mvn.w	r2, #16
 8003b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f9fa 	bl	8003fae <HAL_TIM_IC_CaptureCallback>
 8003bba:	e005      	b.n	8003bc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f9ec 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f9fd 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10e      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0201 	mvn.w	r2, #1
 8003bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fc ff87 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b80      	cmp	r3, #128	; 0x80
 8003c06:	d10e      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d107      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fd01 	bl	8004628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d10e      	bne.n	8003c52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d107      	bne.n	8003c52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f9c2 	bl	8003fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d10e      	bne.n	8003c7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d107      	bne.n	8003c7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f06f 0220 	mvn.w	r2, #32
 8003c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fccb 	bl	8004614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ae      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	f200 809f 	bhi.w	8003df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003df5 	.word	0x08003df5
 8003cc4:	08003df5 	.word	0x08003df5
 8003cc8:	08003df5 	.word	0x08003df5
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003df5 	.word	0x08003df5
 8003cd4:	08003df5 	.word	0x08003df5
 8003cd8:	08003df5 	.word	0x08003df5
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003df5 	.word	0x08003df5
 8003ce4:	08003df5 	.word	0x08003df5
 8003ce8:	08003df5 	.word	0x08003df5
 8003cec:	08003db3 	.word	0x08003db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9f8 	bl	80040ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
      break;
 8003d2e:	e064      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa3e 	bl	80041b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
      break;
 8003d70:	e043      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fa89 	bl	8004290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
      break;
 8003db0:	e023      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fad3 	bl	8004364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
      break;
 8003df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_TIM_ConfigClockSource+0x1c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e0b4      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x186>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e60:	d03e      	beq.n	8003ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e66:	f200 8087 	bhi.w	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	f000 8086 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x172>
 8003e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e76:	d87f      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d01a      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d87b      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b60      	cmp	r3, #96	; 0x60
 8003e82:	d050      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0x11a>
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d877      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b50      	cmp	r3, #80	; 0x50
 8003e8a:	d03c      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0xfa>
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d873      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d058      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x13a>
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d86f      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d064      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x15a>
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d86b      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d060      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d867      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05c      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x15a>
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d05a      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x15a>
 8003eb0:	e062      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6899      	ldr	r1, [r3, #8]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f000 fb19 	bl	80044f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	609a      	str	r2, [r3, #8]
      break;
 8003ede:	e04f      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6899      	ldr	r1, [r3, #8]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f000 fb02 	bl	80044f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f02:	609a      	str	r2, [r3, #8]
      break;
 8003f04:	e03c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6859      	ldr	r1, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f000 fa76 	bl	8004404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2150      	movs	r1, #80	; 0x50
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 facf 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f24:	e02c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f000 fa95 	bl	8004462 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2160      	movs	r1, #96	; 0x60
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fabf 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f44:	e01c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f000 fa56 	bl	8004404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 faaf 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f64:	e00c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f000 faa6 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f76:	e003      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <TIM_Base_SetConfig+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <TIM_Base_SetConfig+0xec>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <TIM_Base_SetConfig+0xf0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <TIM_Base_SetConfig+0xe8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <TIM_Base_SetConfig+0xec>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <TIM_Base_SetConfig+0xf0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <TIM_Base_SetConfig+0xf4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <TIM_Base_SetConfig+0xf8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <TIM_Base_SetConfig+0xfc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d103      	bne.n	80040bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	615a      	str	r2, [r3, #20]
}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0302 	bic.w	r3, r3, #2
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10c      	bne.n	8004162 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0308 	bic.w	r3, r3, #8
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40010000 	.word	0x40010000

080041b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <TIM_OC2_SetConfig+0xd4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10d      	bne.n	8004234 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a15      	ldr	r2, [pc, #84]	; (800428c <TIM_OC2_SetConfig+0xd4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d113      	bne.n	8004264 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <TIM_OC3_SetConfig+0xd0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10d      	bne.n	800430a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_OC3_SetConfig+0xd0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40010000 	.word	0x40010000

08004364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	031b      	lsls	r3, r3, #12
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <TIM_OC4_SetConfig+0x9c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d109      	bne.n	80043d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000

08004404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f023 030a 	bic.w	r3, r3, #10
 8004440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800448c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800449e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	f043 0307 	orr.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	431a      	orrs	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454c:	2302      	movs	r3, #2
 800454e:	e050      	b.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d018      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d013      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00e      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a16      	ldr	r2, [pc, #88]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d009      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a15      	ldr	r2, [pc, #84]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10c      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010000 	.word	0x40010000
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40000c00 	.word	0x40000c00
 8004610:	40014000 	.word	0x40014000

08004614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e03f      	b.n	80046ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fc fca8 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2224      	movs	r2, #36	; 0x24
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800467e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f829 	bl	80046d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b0c0      	sub	sp, #256	; 0x100
 80046de:	af00      	add	r7, sp, #0
 80046e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	431a      	orrs	r2, r3
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004730:	f021 010c 	bic.w	r1, r1, #12
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473e:	430b      	orrs	r3, r1
 8004740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	6999      	ldr	r1, [r3, #24]
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	ea40 0301 	orr.w	r3, r0, r1
 800475e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b8f      	ldr	r3, [pc, #572]	; (80049a4 <UART_SetConfig+0x2cc>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d005      	beq.n	8004778 <UART_SetConfig+0xa0>
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b8d      	ldr	r3, [pc, #564]	; (80049a8 <UART_SetConfig+0x2d0>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d104      	bne.n	8004782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fd ff24 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 800477c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004780:	e003      	b.n	800478a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004782:	f7fd ff0b 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8004786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	f040 810c 	bne.w	80049b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	1891      	adds	r1, r2, r2
 80047b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047b2:	415b      	adcs	r3, r3
 80047b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ba:	4621      	mov	r1, r4
 80047bc:	eb12 0801 	adds.w	r8, r2, r1
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb43 0901 	adc.w	r9, r3, r1
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047da:	4690      	mov	r8, r2
 80047dc:	4699      	mov	r9, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	eb18 0303 	adds.w	r3, r8, r3
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e8:	462b      	mov	r3, r5
 80047ea:	eb49 0303 	adc.w	r3, r9, r3
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004806:	460b      	mov	r3, r1
 8004808:	18db      	adds	r3, r3, r3
 800480a:	653b      	str	r3, [r7, #80]	; 0x50
 800480c:	4613      	mov	r3, r2
 800480e:	eb42 0303 	adc.w	r3, r2, r3
 8004812:	657b      	str	r3, [r7, #84]	; 0x54
 8004814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800481c:	f7fb fce0 	bl	80001e0 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <UART_SetConfig+0x2d4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800483c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	64b9      	str	r1, [r7, #72]	; 0x48
 8004848:	415b      	adcs	r3, r3
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004850:	4641      	mov	r1, r8
 8004852:	eb12 0a01 	adds.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0b01 	adc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800486c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004870:	4692      	mov	sl, r2
 8004872:	469b      	mov	fp, r3
 8004874:	4643      	mov	r3, r8
 8004876:	eb1a 0303 	adds.w	r3, sl, r3
 800487a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800487e:	464b      	mov	r3, r9
 8004880:	eb4b 0303 	adc.w	r3, fp, r3
 8004884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800489c:	460b      	mov	r3, r1
 800489e:	18db      	adds	r3, r3, r3
 80048a0:	643b      	str	r3, [r7, #64]	; 0x40
 80048a2:	4613      	mov	r3, r2
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
 80048aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048b2:	f7fb fc95 	bl	80001e0 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <UART_SetConfig+0x2d4>)
 80048be:	fba3 2301 	umull	r2, r3, r3, r1
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2264      	movs	r2, #100	; 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <UART_SetConfig+0x2d4>)
 80048d4:	fba3 2302 	umull	r2, r3, r3, r2
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048e0:	441c      	add	r4, r3
 80048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80048fc:	415b      	adcs	r3, r3
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6339      	str	r1, [r7, #48]	; 0x30
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004938:	464b      	mov	r3, r9
 800493a:	460a      	mov	r2, r1
 800493c:	eb42 0303 	adc.w	r3, r2, r3
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004958:	460b      	mov	r3, r1
 800495a:	18db      	adds	r3, r3, r3
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	4613      	mov	r3, r2
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800496a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800496e:	f7fb fc37 	bl	80001e0 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <UART_SetConfig+0x2d4>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <UART_SetConfig+0x2d4>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4422      	add	r2, r4
 800499e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a0:	e105      	b.n	8004bae <UART_SetConfig+0x4d6>
 80049a2:	bf00      	nop
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049c2:	4642      	mov	r2, r8
 80049c4:	464b      	mov	r3, r9
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	6239      	str	r1, [r7, #32]
 80049ca:	415b      	adcs	r3, r3
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d2:	4641      	mov	r1, r8
 80049d4:	1854      	adds	r4, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb43 0501 	adc.w	r5, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f8:	464b      	mov	r3, r9
 80049fa:	eb45 0303 	adc.w	r3, r5, r3
 80049fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a1e:	4629      	mov	r1, r5
 8004a20:	008b      	lsls	r3, r1, #2
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a28:	4621      	mov	r1, r4
 8004a2a:	008a      	lsls	r2, r1, #2
 8004a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a30:	f7fb fbd6 	bl	80001e0 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b60      	ldr	r3, [pc, #384]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011c      	lsls	r4, r3, #4
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	61b9      	str	r1, [r7, #24]
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a64:	4641      	mov	r1, r8
 8004a66:	1851      	adds	r1, r2, r1
 8004a68:	6139      	str	r1, [r7, #16]
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	414b      	adcs	r3, r1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	00cb      	lsls	r3, r1, #3
 8004a80:	4651      	mov	r1, sl
 8004a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a86:	4651      	mov	r1, sl
 8004a88:	00ca      	lsls	r2, r1, #3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4642      	mov	r2, r8
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a98:	464b      	mov	r3, r9
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004abc:	4649      	mov	r1, r9
 8004abe:	008b      	lsls	r3, r1, #2
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	008a      	lsls	r2, r1, #2
 8004aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ace:	f7fb fb87 	bl	80001e0 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a34      	ldr	r2, [pc, #208]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af6:	441c      	add	r4, r3
 8004af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afc:	2200      	movs	r2, #0
 8004afe:	673b      	str	r3, [r7, #112]	; 0x70
 8004b00:	677a      	str	r2, [r7, #116]	; 0x74
 8004b02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b16:	4641      	mov	r1, r8
 8004b18:	1851      	adds	r1, r2, r1
 8004b1a:	6039      	str	r1, [r7, #0]
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	414b      	adcs	r3, r1
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b2e:	4659      	mov	r1, fp
 8004b30:	00cb      	lsls	r3, r1, #3
 8004b32:	4651      	mov	r1, sl
 8004b34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b38:	4651      	mov	r1, sl
 8004b3a:	00ca      	lsls	r2, r1, #3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4603      	mov	r3, r0
 8004b42:	4642      	mov	r2, r8
 8004b44:	189b      	adds	r3, r3, r2
 8004b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b48:	464b      	mov	r3, r9
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	4641      	mov	r1, r8
 8004b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b74:	4641      	mov	r1, r8
 8004b76:	008a      	lsls	r2, r1, #2
 8004b78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b7c:	f7fb fb30 	bl	80001e0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b86:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2164      	movs	r1, #100	; 0x64
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4422      	add	r2, r4
 8004bac:	609a      	str	r2, [r3, #8]
}
 8004bae:	bf00      	nop
 8004bb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bba:	bf00      	nop
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	f107 001c 	add.w	r0, r7, #28
 8004bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004bd6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004bda:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004bde:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004be2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004be6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004bea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	b004      	add	sp, #16
 8004c14:	4770      	bx	lr

08004c16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004c72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004c78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004c88:	f023 030f 	bic.w	r3, r3, #15
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	b2db      	uxtb	r3, r3
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	461a      	mov	r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
}  
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004d0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004d14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0

}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b088      	sub	sp, #32
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004d48:	2310      	movs	r3, #16
 8004d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d4c:	2340      	movs	r3, #64	; 0x40
 8004d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d5a:	f107 0308 	add.w	r3, r7, #8
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ff74 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6a:	2110      	movs	r1, #16
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9d7 	bl	8005120 <SDMMC_GetCmdResp1>
 8004d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d74:	69fb      	ldr	r3, [r7, #28]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b088      	sub	sp, #32
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004d8c:	2311      	movs	r3, #17
 8004d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d90:	2340      	movs	r3, #64	; 0x40
 8004d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d9e:	f107 0308 	add.w	r3, r7, #8
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff52 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	2111      	movs	r1, #17
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9b5 	bl	8005120 <SDMMC_GetCmdResp1>
 8004db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004db8:	69fb      	ldr	r3, [r7, #28]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004dd0:	2312      	movs	r3, #18
 8004dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dd4:	2340      	movs	r3, #64	; 0x40
 8004dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff30 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	2112      	movs	r1, #18
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f993 	bl	8005120 <SDMMC_GetCmdResp1>
 8004dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b088      	sub	sp, #32
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004e14:	2318      	movs	r3, #24
 8004e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff ff0e 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e36:	2118      	movs	r1, #24
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f971 	bl	8005120 <SDMMC_GetCmdResp1>
 8004e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e40:	69fb      	ldr	r3, [r7, #28]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b088      	sub	sp, #32
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004e58:	2319      	movs	r3, #25
 8004e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e6a:	f107 0308 	add.w	r3, r7, #8
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff feec 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	2119      	movs	r1, #25
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f94f 	bl	8005120 <SDMMC_GetCmdResp1>
 8004e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e84:	69fb      	ldr	r3, [r7, #28]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ea0:	2340      	movs	r3, #64	; 0x40
 8004ea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff feca 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004eba:	4a05      	ldr	r2, [pc, #20]	; (8004ed0 <SDMMC_CmdStopTransfer+0x40>)
 8004ebc:	210c      	movs	r1, #12
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f92e 	bl	8005120 <SDMMC_GetCmdResp1>
 8004ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	05f5e100 	.word	0x05f5e100

08004ed4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004ee4:	2307      	movs	r3, #7
 8004ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ef6:	f107 0310 	add.w	r3, r7, #16
 8004efa:	4619      	mov	r1, r3
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fea6 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	2107      	movs	r1, #7
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f909 	bl	8005120 <SDMMC_GetCmdResp1>
 8004f0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3728      	adds	r7, #40	; 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f38:	f107 0308 	add.w	r3, r7, #8
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fe85 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fb23 	bl	8005590 <SDMMC_GetCmdError>
 8004f4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3720      	adds	r7, #32
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b088      	sub	sp, #32
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004f5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004f64:	2308      	movs	r3, #8
 8004f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f76:	f107 0308 	add.w	r3, r7, #8
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fe66 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fab6 	bl	80054f4 <SDMMC_GetCmdResp7>
 8004f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004fa2:	2337      	movs	r3, #55	; 0x37
 8004fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fa6:	2340      	movs	r3, #64	; 0x40
 8004fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fe47 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	2137      	movs	r1, #55	; 0x37
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8aa 	bl	8005120 <SDMMC_GetCmdResp1>
 8004fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fce:	69fb      	ldr	r3, [r7, #28]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004fee:	2329      	movs	r3, #41	; 0x29
 8004ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fe21 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9bd 	bl	800538c <SDMMC_GetCmdResp3>
 8005012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005014:	69fb      	ldr	r3, [r7, #28]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b088      	sub	sp, #32
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800502a:	2302      	movs	r3, #2
 800502c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800502e:	23c0      	movs	r3, #192	; 0xc0
 8005030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800503a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff fe03 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f957 	bl	80052fc <SDMMC_GetCmdResp2>
 800504e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005050:	69fb      	ldr	r3, [r7, #28]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b088      	sub	sp, #32
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005068:	2309      	movs	r3, #9
 800506a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800506c:	23c0      	movs	r3, #192	; 0xc0
 800506e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005078:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff fde4 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f938 	bl	80052fc <SDMMC_GetCmdResp2>
 800508c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800508e:	69fb      	ldr	r3, [r7, #28]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80050a6:	2303      	movs	r3, #3
 80050a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050b8:	f107 0308 	add.w	r3, r7, #8
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fdc5 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	2103      	movs	r1, #3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f99d 	bl	8005408 <SDMMC_GetCmdResp6>
 80050ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050d0:	69fb      	ldr	r3, [r7, #28]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b088      	sub	sp, #32
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80050e8:	230d      	movs	r3, #13
 80050ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050ec:	2340      	movs	r3, #64	; 0x40
 80050ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050fa:	f107 0308 	add.w	r3, r7, #8
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fda4 	bl	8004c4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	210d      	movs	r1, #13
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f807 	bl	8005120 <SDMMC_GetCmdResp1>
 8005112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005114:	69fb      	ldr	r3, [r7, #28]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	460b      	mov	r3, r1
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800512e:	4b70      	ldr	r3, [pc, #448]	; (80052f0 <SDMMC_GetCmdResp1+0x1d0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a70      	ldr	r2, [pc, #448]	; (80052f4 <SDMMC_GetCmdResp1+0x1d4>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	0a5a      	lsrs	r2, r3, #9
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	fb02 f303 	mul.w	r3, r2, r3
 8005140:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800514c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005150:	e0c9      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0ef      	beq.n	8005142 <SDMMC_GetCmdResp1+0x22>
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ea      	bne.n	8005142 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2204      	movs	r2, #4
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800517e:	2304      	movs	r3, #4
 8005180:	e0b1      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d004      	beq.n	8005198 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005194:	2301      	movs	r3, #1
 8005196:	e0a6      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	22c5      	movs	r2, #197	; 0xc5
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff fd7f 	bl	8004ca2 <SDIO_GetCommandResponse>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d001      	beq.n	80051b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e099      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80051b2:	2100      	movs	r1, #0
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff fd81 	bl	8004cbc <SDIO_GetResponse>
 80051ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <SDMMC_GetCmdResp1+0x1d8>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e08d      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da02      	bge.n	80051d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80051d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d4:	e087      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	e080      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	e079      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80051fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005200:	e071      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800520c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005210:	e069      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800521c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005220:	e061      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800522c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005230:	e059      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800523c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005240:	e051      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800524c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005250:	e049      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800525c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005260:	e041      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800526c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005270:	e039      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800527c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005280:	e031      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800528c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005290:	e029      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800529c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80052a0:	e021      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80052ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80052b0:	e019      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80052bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052c0:	e011      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80052cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052d0:	e009      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80052dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80052e0:	e001      	b.n	80052e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000000 	.word	0x20000000
 80052f4:	10624dd3 	.word	0x10624dd3
 80052f8:	fdffe008 	.word	0xfdffe008

080052fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005304:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <SDMMC_GetCmdResp2+0x88>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <SDMMC_GetCmdResp2+0x8c>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0a5b      	lsrs	r3, r3, #9
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	60fa      	str	r2, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005328:	e026      	b.n	8005378 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ef      	beq.n	800531a <SDMMC_GetCmdResp2+0x1e>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ea      	bne.n	800531a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2204      	movs	r2, #4
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005356:	2304      	movs	r3, #4
 8005358:	e00e      	b.n	8005378 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800536c:	2301      	movs	r3, #1
 800536e:	e003      	b.n	8005378 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	22c5      	movs	r2, #197	; 0xc5
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	20000000 	.word	0x20000000
 8005388:	10624dd3 	.word	0x10624dd3

0800538c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005394:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <SDMMC_GetCmdResp3+0x74>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <SDMMC_GetCmdResp3+0x78>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	0a5b      	lsrs	r3, r3, #9
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1e5a      	subs	r2, r3, #1
 80053ae:	60fa      	str	r2, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d102      	bne.n	80053ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053b8:	e01b      	b.n	80053f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0ef      	beq.n	80053aa <SDMMC_GetCmdResp3+0x1e>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ea      	bne.n	80053aa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2204      	movs	r2, #4
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053e6:	2304      	movs	r3, #4
 80053e8:	e003      	b.n	80053f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	22c5      	movs	r2, #197	; 0xc5
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000000 	.word	0x20000000
 8005404:	10624dd3 	.word	0x10624dd3

08005408 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	460b      	mov	r3, r1
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005416:	4b35      	ldr	r3, [pc, #212]	; (80054ec <SDMMC_GetCmdResp6+0xe4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a35      	ldr	r2, [pc, #212]	; (80054f0 <SDMMC_GetCmdResp6+0xe8>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	0a5b      	lsrs	r3, r3, #9
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	1e5a      	subs	r2, r3, #1
 8005430:	61fa      	str	r2, [r7, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800543a:	e052      	b.n	80054e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <SDMMC_GetCmdResp6+0x24>
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1ea      	bne.n	800542c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2204      	movs	r2, #4
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005468:	2304      	movs	r3, #4
 800546a:	e03a      	b.n	80054e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800547e:	2301      	movs	r3, #1
 8005480:	e02f      	b.n	80054e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff fc0d 	bl	8004ca2 <SDIO_GetCommandResponse>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	4293      	cmp	r3, r2
 8005490:	d001      	beq.n	8005496 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005492:	2301      	movs	r3, #1
 8005494:	e025      	b.n	80054e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22c5      	movs	r2, #197	; 0xc5
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800549c:	2100      	movs	r1, #0
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fc0c 	bl	8004cbc <SDIO_GetResponse>
 80054a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e011      	b.n	80054e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054cc:	e009      	b.n	80054e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054dc:	e001      	b.n	80054e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80054de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000000 	.word	0x20000000
 80054f0:	10624dd3 	.word	0x10624dd3

080054f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <SDMMC_GetCmdResp7+0x94>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a22      	ldr	r2, [pc, #136]	; (800558c <SDMMC_GetCmdResp7+0x98>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	0a5b      	lsrs	r3, r3, #9
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1e5a      	subs	r2, r3, #1
 8005516:	60fa      	str	r2, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800551c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005520:	e02c      	b.n	800557c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ef      	beq.n	8005512 <SDMMC_GetCmdResp7+0x1e>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ea      	bne.n	8005512 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d004      	beq.n	8005552 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800554e:	2304      	movs	r3, #4
 8005550:	e014      	b.n	800557c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d004      	beq.n	8005568 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005564:	2301      	movs	r3, #1
 8005566:	e009      	b.n	800557c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2240      	movs	r2, #64	; 0x40
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
  
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000000 	.word	0x20000000
 800558c:	10624dd3 	.word	0x10624dd3

08005590 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005598:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <SDMMC_GetCmdError+0x50>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <SDMMC_GetCmdError+0x54>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	0a5b      	lsrs	r3, r3, #9
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	60fa      	str	r2, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055bc:	e009      	b.n	80055d2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f1      	beq.n	80055ae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	22c5      	movs	r2, #197	; 0xc5
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000000 	.word	0x20000000
 80055e4:	10624dd3 	.word	0x10624dd3

080055e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055e8:	b084      	sub	sp, #16
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	f107 001c 	add.w	r0, r7, #28
 80055f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d122      	bne.n	8005646 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d105      	bne.n	800563a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f904 	bl	8005848 <USB_CoreReset>
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]
 8005644:	e01a      	b.n	800567c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8f8 	bl	8005848 <USB_CoreReset>
 8005658:	4603      	mov	r3, r0
 800565a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
 800566e:	e005      	b.n	800567c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b01      	cmp	r3, #1
 8005680:	d10b      	bne.n	800569a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f043 0206 	orr.w	r2, r3, #6
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f043 0220 	orr.w	r2, r3, #32
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056a6:	b004      	add	sp, #16
 80056a8:	4770      	bx	lr

080056aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f023 0201 	bic.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d115      	bne.n	800571a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056fa:	2001      	movs	r0, #1
 80056fc:	f7fb fde6 	bl	80012cc <HAL_Delay>
      ms++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f890 	bl	800582c <USB_GetMode>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d01e      	beq.n	8005750 <USB_SetCurrentMode+0x84>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b31      	cmp	r3, #49	; 0x31
 8005716:	d9f0      	bls.n	80056fa <USB_SetCurrentMode+0x2e>
 8005718:	e01a      	b.n	8005750 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d115      	bne.n	800574c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800572c:	2001      	movs	r0, #1
 800572e:	f7fb fdcd 	bl	80012cc <HAL_Delay>
      ms++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f877 	bl	800582c <USB_GetMode>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <USB_SetCurrentMode+0x84>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b31      	cmp	r3, #49	; 0x31
 8005748:	d9f0      	bls.n	800572c <USB_SetCurrentMode+0x60>
 800574a:	e001      	b.n	8005750 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e005      	b.n	800575c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b32      	cmp	r3, #50	; 0x32
 8005754:	d101      	bne.n	800575a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <USB_FlushTxFifo+0x64>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d901      	bls.n	8005784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e01b      	b.n	80057bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	daf2      	bge.n	8005772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	019b      	lsls	r3, r3, #6
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <USB_FlushTxFifo+0x64>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e006      	b.n	80057bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d0f0      	beq.n	800579c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	00030d40 	.word	0x00030d40

080057cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a11      	ldr	r2, [pc, #68]	; (8005828 <USB_FlushRxFifo+0x5c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e018      	b.n	800581c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	daf2      	bge.n	80057d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2210      	movs	r2, #16
 80057fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a08      	ldr	r2, [pc, #32]	; (8005828 <USB_FlushRxFifo+0x5c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e006      	b.n	800581c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b10      	cmp	r3, #16
 8005818:	d0f0      	beq.n	80057fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	00030d40 	.word	0x00030d40

0800582c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0301 	and.w	r3, r3, #1
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a13      	ldr	r2, [pc, #76]	; (80058ac <USB_CoreReset+0x64>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e01b      	b.n	800589e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	daf2      	bge.n	8005854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <USB_CoreReset+0x64>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e006      	b.n	800589e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d0f0      	beq.n	800587e <USB_CoreReset+0x36>

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	00030d40 	.word	0x00030d40

080058b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058b0:	b084      	sub	sp, #16
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d018      	beq.n	8005938 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10a      	bne.n	8005922 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800591a:	f043 0304 	orr.w	r3, r3, #4
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e014      	b.n	800594c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e009      	b.n	800594c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005946:	f023 0304 	bic.w	r3, r3, #4
 800594a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800594c:	2110      	movs	r1, #16
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff ff08 	bl	8005764 <USB_FlushTxFifo>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff34 	bl	80057cc <USB_FlushRxFifo>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	e015      	b.n	80059a0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	461a      	mov	r2, r3
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	461a      	mov	r2, r3
 8005996:	2300      	movs	r3, #0
 8005998:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3301      	adds	r3, #1
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d3e5      	bcc.n	8005974 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295
 80059b4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a13      	ldr	r2, [pc, #76]	; (8005a1c <USB_HostInit+0x16c>)
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <USB_HostInit+0x170>)
 80059d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059d8:	e009      	b.n	80059ee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <USB_HostInit+0x174>)
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a0f      	ldr	r2, [pc, #60]	; (8005a28 <USB_HostInit+0x178>)
 80059ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f043 0210 	orr.w	r2, r3, #16
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699a      	ldr	r2, [r3, #24]
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <USB_HostInit+0x17c>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a18:	b004      	add	sp, #16
 8005a1a:	4770      	bx	lr
 8005a1c:	01000200 	.word	0x01000200
 8005a20:	00e00300 	.word	0x00e00300
 8005a24:	00600080 	.word	0x00600080
 8005a28:	004000e0 	.word	0x004000e0
 8005a2c:	a3200008 	.word	0xa3200008

08005a30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005a34:	4904      	ldr	r1, [pc, #16]	; (8005a48 <MX_FATFS_Init+0x18>)
 8005a36:	4805      	ldr	r0, [pc, #20]	; (8005a4c <MX_FATFS_Init+0x1c>)
 8005a38:	f000 fa7c 	bl	8005f34 <FATFS_LinkDriver>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <MX_FATFS_Init+0x20>)
 8005a42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a44:	bf00      	nop
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	200005c8 	.word	0x200005c8
 8005a4c:	08008fd8 	.word	0x08008fd8
 8005a50:	200005c4 	.word	0x200005c4

08005a54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005a5e:	f000 f86d 	bl	8005b3c <BSP_SD_IsDetected>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d001      	beq.n	8005a6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e005      	b.n	8005a78 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005a6c:	4804      	ldr	r0, [pc, #16]	; (8005a80 <BSP_SD_Init+0x2c>)
 8005a6e:	f7fc ffd9 	bl	8002a24 <HAL_SD_Init>
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005a76:	79fb      	ldrb	r3, [r7, #7]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000108 	.word	0x20000108

08005a84 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	68f9      	ldr	r1, [r7, #12]
 8005a9a:	4806      	ldr	r0, [pc, #24]	; (8005ab4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005a9c:	f7fd f872 	bl	8002b84 <HAL_SD_ReadBlocks_DMA>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000108 	.word	0x20000108

08005ab8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	4806      	ldr	r0, [pc, #24]	; (8005ae8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005ad0:	f7fd f93a 	bl	8002d48 <HAL_SD_WriteBlocks_DMA>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000108 	.word	0x20000108

08005aec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005af0:	4805      	ldr	r0, [pc, #20]	; (8005b08 <BSP_SD_GetCardState+0x1c>)
 8005af2:	f7fd fbe9 	bl	80032c8 <HAL_SD_GetCardState>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000108 	.word	0x20000108

08005b0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4803      	ldr	r0, [pc, #12]	; (8005b24 <BSP_SD_GetCardInfo+0x18>)
 8005b18:	f7fd fbaa 	bl	8003270 <HAL_SD_GetCardInfo>
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000108 	.word	0x20000108

08005b28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005b30:	f000 f9a2 	bl	8005e78 <BSP_SD_ReadCpltCallback>
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005b42:	2301      	movs	r3, #1
 8005b44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005b46:	f000 f80b 	bl	8005b60 <BSP_PlatformIsDetected>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005b50:	2300      	movs	r3, #0
 8005b52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	b2db      	uxtb	r3, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005b66:	2301      	movs	r3, #1
 8005b68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b6e:	4806      	ldr	r0, [pc, #24]	; (8005b88 <BSP_PlatformIsDetected+0x28>)
 8005b70:	f7fb fee4 	bl	800193c <HAL_GPIO_ReadPin>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40020400 	.word	0x40020400

08005b8c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005b94:	f000 fa8e 	bl	80060b4 <osKernelGetTickCount>
 8005b98:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005b9a:	e006      	b.n	8005baa <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b9c:	f7ff ffa6 	bl	8005aec <BSP_SD_GetCardState>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e009      	b.n	8005bbe <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005baa:	f000 fa83 	bl	80060b4 <osKernelGetTickCount>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d8f0      	bhi.n	8005b9c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <SD_CheckStatus+0x38>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005bd8:	f7ff ff88 	bl	8005aec <BSP_SD_GetCardState>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d107      	bne.n	8005bf2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <SD_CheckStatus+0x38>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <SD_CheckStatus+0x38>)
 8005bf0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005bf2:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <SD_CheckStatus+0x38>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b2db      	uxtb	r3, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000009 	.word	0x20000009

08005c04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <SD_initialize+0x7c>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005c14:	f000 fa06 	bl	8006024 <osKernelGetState>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d129      	bne.n	8005c72 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005c1e:	f7ff ff19 	bl	8005a54 <BSP_SD_Init>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff ffcc 	bl	8005bc8 <SD_CheckStatus>
 8005c30:	4603      	mov	r3, r0
 8005c32:	461a      	mov	r2, r3
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <SD_initialize+0x7c>)
 8005c36:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005c38:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <SD_initialize+0x7c>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d017      	beq.n	8005c72 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8005c42:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <SD_initialize+0x80>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d107      	bne.n	8005c5a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	200a      	movs	r0, #10
 8005c50:	f000 faf2 	bl	8006238 <osMessageQueueNew>
 8005c54:	4603      	mov	r3, r0
 8005c56:	4a0b      	ldr	r2, [pc, #44]	; (8005c84 <SD_initialize+0x80>)
 8005c58:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <SD_initialize+0x80>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d107      	bne.n	8005c72 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <SD_initialize+0x7c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <SD_initialize+0x7c>)
 8005c70:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005c72:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <SD_initialize+0x7c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000009 	.word	0x20000009
 8005c84:	200005cc 	.word	0x200005cc

08005c88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ff97 	bl	8005bc8 <SD_CheckStatus>
 8005c9a:	4603      	mov	r3, r0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005cb8:	f247 5030 	movw	r0, #30000	; 0x7530
 8005cbc:	f7ff ff66 	bl	8005b8c <SD_CheckStatusWithTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da01      	bge.n	8005cca <SD_read+0x26>
  {
    return res;
 8005cc6:	7ffb      	ldrb	r3, [r7, #31]
 8005cc8:	e02f      	b.n	8005d2a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	68b8      	ldr	r0, [r7, #8]
 8005cd0:	f7ff fed8 	bl	8005a84 <BSP_SD_ReadBlocks_DMA>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8005cd8:	7fbb      	ldrb	r3, [r7, #30]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d124      	bne.n	8005d28 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005cde:	4b15      	ldr	r3, [pc, #84]	; (8005d34 <SD_read+0x90>)
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f107 0112 	add.w	r1, r7, #18
 8005ce6:	f247 5330 	movw	r3, #30000	; 0x7530
 8005cea:	2200      	movs	r2, #0
 8005cec:	f000 fb78 	bl	80063e0 <osMessageQueueGet>
 8005cf0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d117      	bne.n	8005d28 <SD_read+0x84>
 8005cf8:	8a7b      	ldrh	r3, [r7, #18]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d114      	bne.n	8005d28 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8005cfe:	f000 f9d9 	bl	80060b4 <osKernelGetTickCount>
 8005d02:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005d04:	e007      	b.n	8005d16 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005d06:	f7ff fef1 	bl	8005aec <BSP_SD_GetCardState>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d102      	bne.n	8005d16 <SD_read+0x72>
              {
                res = RES_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005d14:	e008      	b.n	8005d28 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005d16:	f000 f9cd 	bl	80060b4 <osKernelGetTickCount>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f247 522f 	movw	r2, #29999	; 0x752f
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d9ee      	bls.n	8005d06 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200005cc 	.word	0x200005cc

08005d38 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005d4c:	f247 5030 	movw	r0, #30000	; 0x7530
 8005d50:	f7ff ff1c 	bl	8005b8c <SD_CheckStatusWithTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da01      	bge.n	8005d5e <SD_write+0x26>
  {
    return res;
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
 8005d5c:	e02d      	b.n	8005dba <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	68b8      	ldr	r0, [r7, #8]
 8005d64:	f7ff fea8 	bl	8005ab8 <BSP_SD_WriteBlocks_DMA>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d124      	bne.n	8005db8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8005d6e:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <SD_write+0x8c>)
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f107 0112 	add.w	r1, r7, #18
 8005d76:	f247 5330 	movw	r3, #30000	; 0x7530
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f000 fb30 	bl	80063e0 <osMessageQueueGet>
 8005d80:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d117      	bne.n	8005db8 <SD_write+0x80>
 8005d88:	8a7b      	ldrh	r3, [r7, #18]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d114      	bne.n	8005db8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8005d8e:	f000 f991 	bl	80060b4 <osKernelGetTickCount>
 8005d92:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005d94:	e007      	b.n	8005da6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005d96:	f7ff fea9 	bl	8005aec <BSP_SD_GetCardState>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <SD_write+0x6e>
          {
            res = RES_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	77fb      	strb	r3, [r7, #31]
            break;
 8005da4:	e008      	b.n	8005db8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005da6:	f000 f985 	bl	80060b4 <osKernelGetTickCount>
 8005daa:	4602      	mov	r2, r0
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f247 522f 	movw	r2, #29999	; 0x752f
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d9ee      	bls.n	8005d96 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8005db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200005cc 	.word	0x200005cc

08005dc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	603a      	str	r2, [r7, #0]
 8005dd2:	71fb      	strb	r3, [r7, #7]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005dde:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <SD_ioctl+0xac>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <SD_ioctl+0x28>
 8005dec:	2303      	movs	r3, #3
 8005dee:	e03c      	b.n	8005e6a <SD_ioctl+0xa2>

  switch (cmd)
 8005df0:	79bb      	ldrb	r3, [r7, #6]
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d834      	bhi.n	8005e60 <SD_ioctl+0x98>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <SD_ioctl+0x34>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e15 	.word	0x08005e15
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e47 	.word	0x08005e47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e12:	e028      	b.n	8005e66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fe77 	bl	8005b0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e2a:	e01c      	b.n	8005e66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005e2c:	f107 030c 	add.w	r3, r7, #12
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fe6b 	bl	8005b0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e44:	e00f      	b.n	8005e66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fe5e 	bl	8005b0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	0a5a      	lsrs	r2, r3, #9
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e5e:	e002      	b.n	8005e66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3730      	adds	r7, #48	; 0x30
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000009 	.word	0x20000009

08005e78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <BSP_SD_ReadCpltCallback+0x20>)
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	1db9      	adds	r1, r7, #6
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f000 fa48 	bl	8006320 <osMessageQueuePut>
#endif
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200005cc 	.word	0x200005cc

08005e9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005eb4:	7a5b      	ldrb	r3, [r3, #9]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d131      	bne.n	8005f20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ebc:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005ebe:	7a5b      	ldrb	r3, [r3, #9]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005eca:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005ecc:	7a5b      	ldrb	r3, [r3, #9]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	4a17      	ldr	r2, [pc, #92]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005edc:	7a5b      	ldrb	r3, [r3, #9]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005ee4:	4413      	add	r3, r2
 8005ee6:	79fa      	ldrb	r2, [r7, #7]
 8005ee8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005eec:	7a5b      	ldrb	r3, [r3, #9]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	b2d1      	uxtb	r1, r2
 8005ef4:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <FATFS_LinkDriverEx+0x94>)
 8005ef6:	7251      	strb	r1, [r2, #9]
 8005ef8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005efa:	7dbb      	ldrb	r3, [r7, #22]
 8005efc:	3330      	adds	r3, #48	; 0x30
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3301      	adds	r3, #1
 8005f08:	223a      	movs	r2, #58	; 0x3a
 8005f0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	3302      	adds	r3, #2
 8005f10:	222f      	movs	r2, #47	; 0x2f
 8005f12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	3303      	adds	r3, #3
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	200005d0 	.word	0x200005d0

08005f34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff ffaa 	bl	8005e9c <FATFS_LinkDriverEx>
 8005f48:	4603      	mov	r3, r0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <__NVIC_SetPriority>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	6039      	str	r1, [r7, #0]
 8005f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	db0a      	blt.n	8005f7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	490c      	ldr	r1, [pc, #48]	; (8005fa0 <__NVIC_SetPriority+0x4c>)
 8005f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f72:	0112      	lsls	r2, r2, #4
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	440b      	add	r3, r1
 8005f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f7c:	e00a      	b.n	8005f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4908      	ldr	r1, [pc, #32]	; (8005fa4 <__NVIC_SetPriority+0x50>)
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	3b04      	subs	r3, #4
 8005f8c:	0112      	lsls	r2, r2, #4
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	440b      	add	r3, r1
 8005f92:	761a      	strb	r2, [r3, #24]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	e000e100 	.word	0xe000e100
 8005fa4:	e000ed00 	.word	0xe000ed00

08005fa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <SysTick_Handler+0x1c>)
 8005fae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005fb0:	f001 ff32 	bl	8007e18 <xTaskGetSchedulerState>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d001      	beq.n	8005fbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005fba:	f002 fd1d 	bl	80089f8 <xPortSysTickHandler>
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	e000e010 	.word	0xe000e010

08005fc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f06f 0004 	mvn.w	r0, #4
 8005fd2:	f7ff ffbf 	bl	8005f54 <__NVIC_SetPriority>
#endif
}
 8005fd6:	bf00      	nop
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe2:	f3ef 8305 	mrs	r3, IPSR
 8005fe6:	603b      	str	r3, [r7, #0]
  return(result);
 8005fe8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005fee:	f06f 0305 	mvn.w	r3, #5
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	e00c      	b.n	8006010 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <osKernelInitialize+0x44>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d105      	bne.n	800600a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ffe:	4b08      	ldr	r3, [pc, #32]	; (8006020 <osKernelInitialize+0x44>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006004:	2300      	movs	r3, #0
 8006006:	607b      	str	r3, [r7, #4]
 8006008:	e002      	b.n	8006010 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295
 800600e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006010:	687b      	ldr	r3, [r7, #4]
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	200005dc 	.word	0x200005dc

08006024 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800602a:	f001 fef5 	bl	8007e18 <xTaskGetSchedulerState>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <osKernelGetState+0x1a>
 8006034:	2b02      	cmp	r3, #2
 8006036:	d105      	bne.n	8006044 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8006038:	2302      	movs	r3, #2
 800603a:	607b      	str	r3, [r7, #4]
      break;
 800603c:	e00c      	b.n	8006058 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800603e:	2303      	movs	r3, #3
 8006040:	607b      	str	r3, [r7, #4]
      break;
 8006042:	e009      	b.n	8006058 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <osKernelGetState+0x40>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d102      	bne.n	8006052 <osKernelGetState+0x2e>
        state = osKernelReady;
 800604c:	2301      	movs	r3, #1
 800604e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8006050:	e001      	b.n	8006056 <osKernelGetState+0x32>
        state = osKernelInactive;
 8006052:	2300      	movs	r3, #0
 8006054:	607b      	str	r3, [r7, #4]
      break;
 8006056:	bf00      	nop
  }

  return (state);
 8006058:	687b      	ldr	r3, [r7, #4]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200005dc 	.word	0x200005dc

08006068 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800606e:	f3ef 8305 	mrs	r3, IPSR
 8006072:	603b      	str	r3, [r7, #0]
  return(result);
 8006074:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <osKernelStart+0x1a>
    stat = osErrorISR;
 800607a:	f06f 0305 	mvn.w	r3, #5
 800607e:	607b      	str	r3, [r7, #4]
 8006080:	e010      	b.n	80060a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <osKernelStart+0x48>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d109      	bne.n	800609e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800608a:	f7ff ff9d 	bl	8005fc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800608e:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <osKernelStart+0x48>)
 8006090:	2202      	movs	r2, #2
 8006092:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006094:	f001 fa66 	bl	8007564 <vTaskStartScheduler>
      stat = osOK;
 8006098:	2300      	movs	r3, #0
 800609a:	607b      	str	r3, [r7, #4]
 800609c:	e002      	b.n	80060a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295
 80060a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060a4:	687b      	ldr	r3, [r7, #4]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200005dc 	.word	0x200005dc

080060b4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ba:	f3ef 8305 	mrs	r3, IPSR
 80060be:	603b      	str	r3, [r7, #0]
  return(result);
 80060c0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80060c6:	f001 fb6f 	bl	80077a8 <xTaskGetTickCountFromISR>
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	e002      	b.n	80060d4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80060ce:	f001 fb5b 	bl	8007788 <xTaskGetTickCount>
 80060d2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060de:	b580      	push	{r7, lr}
 80060e0:	b08e      	sub	sp, #56	; 0x38
 80060e2:	af04      	add	r7, sp, #16
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	617b      	str	r3, [r7, #20]
  return(result);
 80060f4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d17e      	bne.n	80061f8 <osThreadNew+0x11a>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d07b      	beq.n	80061f8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006104:	2318      	movs	r3, #24
 8006106:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006108:	2300      	movs	r3, #0
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800610c:	f04f 33ff 	mov.w	r3, #4294967295
 8006110:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d045      	beq.n	80061a4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <osThreadNew+0x48>
        name = attr->name;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <osThreadNew+0x6e>
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2b38      	cmp	r3, #56	; 0x38
 800613e:	d805      	bhi.n	800614c <osThreadNew+0x6e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <osThreadNew+0x72>
        return (NULL);
 800614c:	2300      	movs	r3, #0
 800614e:	e054      	b.n	80061fa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00e      	beq.n	8006186 <osThreadNew+0xa8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b5b      	cmp	r3, #91	; 0x5b
 800616e:	d90a      	bls.n	8006186 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006174:	2b00      	cmp	r3, #0
 8006176:	d006      	beq.n	8006186 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <osThreadNew+0xa8>
        mem = 1;
 8006180:	2301      	movs	r3, #1
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e010      	b.n	80061a8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <osThreadNew+0xca>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d108      	bne.n	80061a8 <osThreadNew+0xca>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <osThreadNew+0xca>
          mem = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e001      	b.n	80061a8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d110      	bne.n	80061d0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061b6:	9202      	str	r2, [sp, #8]
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fff7 	bl	80071b8 <xTaskCreateStatic>
 80061ca:	4603      	mov	r3, r0
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e013      	b.n	80061f8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d110      	bne.n	80061f8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f107 0310 	add.w	r3, r7, #16
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 f842 	bl	8007272 <xTaskCreate>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <osThreadNew+0x11a>
            hTask = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061f8:	693b      	ldr	r3, [r7, #16]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800620a:	f3ef 8305 	mrs	r3, IPSR
 800620e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006210:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <osDelay+0x1c>
    stat = osErrorISR;
 8006216:	f06f 0305 	mvn.w	r3, #5
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e007      	b.n	800622e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <osDelay+0x2c>
      vTaskDelay(ticks);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 f967 	bl	80074fc <vTaskDelay>
    }
  }

  return (stat);
 800622e:	68fb      	ldr	r3, [r7, #12]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006248:	f3ef 8305 	mrs	r3, IPSR
 800624c:	613b      	str	r3, [r7, #16]
  return(result);
 800624e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006250:	2b00      	cmp	r3, #0
 8006252:	d15f      	bne.n	8006314 <osMessageQueueNew+0xdc>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d05c      	beq.n	8006314 <osMessageQueueNew+0xdc>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d059      	beq.n	8006314 <osMessageQueueNew+0xdc>
    mem = -1;
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d029      	beq.n	80062c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d012      	beq.n	800629a <osMessageQueueNew+0x62>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2b4f      	cmp	r3, #79	; 0x4f
 800627a:	d90e      	bls.n	800629a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	429a      	cmp	r2, r3
 8006292:	d302      	bcc.n	800629a <osMessageQueueNew+0x62>
        mem = 1;
 8006294:	2301      	movs	r3, #1
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	e014      	b.n	80062c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d110      	bne.n	80062c4 <osMessageQueueNew+0x8c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <osMessageQueueNew+0x8c>
          mem = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	e001      	b.n	80062c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d10b      	bne.n	80062e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2100      	movs	r1, #0
 80062d4:	9100      	str	r1, [sp, #0]
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa2f 	bl	800673c <xQueueGenericCreateStatic>
 80062de:	61f8      	str	r0, [r7, #28]
 80062e0:	e008      	b.n	80062f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80062e8:	2200      	movs	r2, #0
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fa9d 	bl	800682c <xQueueGenericCreate>
 80062f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e001      	b.n	800630c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	69f8      	ldr	r0, [r7, #28]
 8006310:	f000 fef4 	bl	80070fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006314:	69fb      	ldr	r3, [r7, #28]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006334:	2300      	movs	r3, #0
 8006336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006338:	f3ef 8305 	mrs	r3, IPSR
 800633c:	617b      	str	r3, [r7, #20]
  return(result);
 800633e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006340:	2b00      	cmp	r3, #0
 8006342:	d028      	beq.n	8006396 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <osMessageQueuePut+0x36>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <osMessageQueuePut+0x36>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006356:	f06f 0303 	mvn.w	r3, #3
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	e038      	b.n	80063d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006362:	f107 0210 	add.w	r2, r7, #16
 8006366:	2300      	movs	r3, #0
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	69b8      	ldr	r0, [r7, #24]
 800636c:	f000 fbba 	bl	8006ae4 <xQueueGenericSendFromISR>
 8006370:	4603      	mov	r3, r0
 8006372:	2b01      	cmp	r3, #1
 8006374:	d003      	beq.n	800637e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006376:	f06f 0302 	mvn.w	r3, #2
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e028      	b.n	80063d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d025      	beq.n	80063d0 <osMessageQueuePut+0xb0>
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <osMessageQueuePut+0xbc>)
 8006386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	e01c      	b.n	80063d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <osMessageQueuePut+0x82>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80063a2:	f06f 0303 	mvn.w	r3, #3
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	e012      	b.n	80063d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80063aa:	2300      	movs	r3, #0
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	69b8      	ldr	r0, [r7, #24]
 80063b2:	f000 fa99 	bl	80068e8 <xQueueGenericSend>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d009      	beq.n	80063d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80063c2:	f06f 0301 	mvn.w	r3, #1
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e002      	b.n	80063d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80063ca:	f06f 0302 	mvn.w	r3, #2
 80063ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80063d0:	69fb      	ldr	r3, [r7, #28]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f6:	f3ef 8305 	mrs	r3, IPSR
 80063fa:	617b      	str	r3, [r7, #20]
  return(result);
 80063fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d028      	beq.n	8006454 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <osMessageQueueGet+0x34>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <osMessageQueueGet+0x34>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006414:	f06f 0303 	mvn.w	r3, #3
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	e037      	b.n	800648c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800641c:	2300      	movs	r3, #0
 800641e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006420:	f107 0310 	add.w	r3, r7, #16
 8006424:	461a      	mov	r2, r3
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	69b8      	ldr	r0, [r7, #24]
 800642a:	f000 fcd7 	bl	8006ddc <xQueueReceiveFromISR>
 800642e:	4603      	mov	r3, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	d003      	beq.n	800643c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006434:	f06f 0302 	mvn.w	r3, #2
 8006438:	61fb      	str	r3, [r7, #28]
 800643a:	e027      	b.n	800648c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d024      	beq.n	800648c <osMessageQueueGet+0xac>
 8006442:	4b15      	ldr	r3, [pc, #84]	; (8006498 <osMessageQueueGet+0xb8>)
 8006444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	e01b      	b.n	800648c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <osMessageQueueGet+0x80>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006460:	f06f 0303 	mvn.w	r3, #3
 8006464:	61fb      	str	r3, [r7, #28]
 8006466:	e011      	b.n	800648c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	69b8      	ldr	r0, [r7, #24]
 800646e:	f000 fbd5 	bl	8006c1c <xQueueReceive>
 8006472:	4603      	mov	r3, r0
 8006474:	2b01      	cmp	r3, #1
 8006476:	d009      	beq.n	800648c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800647e:	f06f 0301 	mvn.w	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e002      	b.n	800648c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006486:	f06f 0302 	mvn.w	r3, #2
 800648a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800648c:	69fb      	ldr	r3, [r7, #28]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a07      	ldr	r2, [pc, #28]	; (80064c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80064ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4a06      	ldr	r2, [pc, #24]	; (80064cc <vApplicationGetIdleTaskMemory+0x30>)
 80064b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	601a      	str	r2, [r3, #0]
}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	200005e0 	.word	0x200005e0
 80064cc:	2000063c 	.word	0x2000063c

080064d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4a07      	ldr	r2, [pc, #28]	; (80064fc <vApplicationGetTimerTaskMemory+0x2c>)
 80064e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4a06      	ldr	r2, [pc, #24]	; (8006500 <vApplicationGetTimerTaskMemory+0x30>)
 80064e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	bf00      	nop
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	2000083c 	.word	0x2000083c
 8006500:	20000898 	.word	0x20000898

08006504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f103 0208 	add.w	r2, r3, #8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f04f 32ff 	mov.w	r2, #4294967295
 800651c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f103 0208 	add.w	r2, r3, #8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f103 0208 	add.w	r2, r3, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	601a      	str	r2, [r3, #0]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d103      	bne.n	80065c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e00c      	b.n	80065e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3308      	adds	r3, #8
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e002      	b.n	80065d4 <vListInsert+0x2e>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d2f6      	bcs.n	80065ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6892      	ldr	r2, [r2, #8]
 800662e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6852      	ldr	r2, [r2, #4]
 8006638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	429a      	cmp	r2, r3
 8006642:	d103      	bne.n	800664c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	1e5a      	subs	r2, r3, #1
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006696:	f002 f91d 	bl	80088d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066a6:	fb01 f303 	mul.w	r3, r1, r3
 80066aa:	441a      	add	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c6:	3b01      	subs	r3, #1
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	22ff      	movs	r2, #255	; 0xff
 80066da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d114      	bne.n	8006716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01a      	beq.n	800672a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3310      	adds	r3, #16
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f9cf 	bl	8007a9c <xTaskRemoveFromEventList>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d012      	beq.n	800672a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <xQueueGenericReset+0xcc>)
 8006706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	e009      	b.n	800672a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3310      	adds	r3, #16
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fef2 	bl	8006504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3324      	adds	r3, #36	; 0x24
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff feed 	bl	8006504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800672a:	f002 f903 	bl	8008934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800672e:	2301      	movs	r3, #1
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08e      	sub	sp, #56	; 0x38
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <xQueueGenericCreateStatic+0x52>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <xQueueGenericCreateStatic+0x56>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueGenericCreateStatic+0x58>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	623b      	str	r3, [r7, #32]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <xQueueGenericCreateStatic+0x7e>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <xQueueGenericCreateStatic+0x82>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <xQueueGenericCreateStatic+0x84>
 80067be:	2300      	movs	r3, #0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	61fb      	str	r3, [r7, #28]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067da:	2350      	movs	r3, #80	; 0x50
 80067dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b50      	cmp	r3, #80	; 0x50
 80067e2:	d00a      	beq.n	80067fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	61bb      	str	r3, [r7, #24]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800680e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4613      	mov	r3, r2
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f83f 	bl	80068a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006824:	4618      	mov	r0, r3
 8006826:	3730      	adds	r7, #48	; 0x30
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	; 0x28
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	613b      	str	r3, [r7, #16]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	fb02 f303 	mul.w	r3, r2, r3
 800685e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3350      	adds	r3, #80	; 0x50
 8006864:	4618      	mov	r0, r3
 8006866:	f002 f957 	bl	8008b18 <pvPortMalloc>
 800686a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d011      	beq.n	8006896 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	3350      	adds	r3, #80	; 0x50
 800687a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006884:	79fa      	ldrb	r2, [r7, #7]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f805 	bl	80068a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006896:	69bb      	ldr	r3, [r7, #24]
	}
 8006898:	4618      	mov	r0, r3
 800689a:	3720      	adds	r7, #32
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e002      	b.n	80068c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068ce:	2101      	movs	r1, #1
 80068d0:	69b8      	ldr	r0, [r7, #24]
 80068d2:	f7ff fecb 	bl	800666c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericSend+0x32>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <xQueueGenericSend+0x40>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericSend+0x44>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <xQueueGenericSend+0x46>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xQueueGenericSend+0x60>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d103      	bne.n	8006956 <xQueueGenericSend+0x6e>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <xQueueGenericSend+0x72>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericSend+0x74>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueGenericSend+0x8e>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	623b      	str	r3, [r7, #32]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006976:	f001 fa4f 	bl	8007e18 <xTaskGetSchedulerState>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <xQueueGenericSend+0x9e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xQueueGenericSend+0xa2>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueGenericSend+0xa4>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61fb      	str	r3, [r7, #28]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a6:	f001 ff95 	bl	80088d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d302      	bcc.n	80069bc <xQueueGenericSend+0xd4>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d129      	bne.n	8006a10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c2:	f000 fa8b 	bl	8006edc <prvCopyDataToQueue>
 80069c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d010      	beq.n	80069f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	3324      	adds	r3, #36	; 0x24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 f861 	bl	8007a9c <xTaskRemoveFromEventList>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d013      	beq.n	8006a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	e00a      	b.n	8006a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f8:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a08:	f001 ff94 	bl	8008934 <vPortExitCritical>
				return pdPASS;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e063      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a16:	f001 ff8d 	bl	8008934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e05c      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 f89b 	bl	8007b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a32:	f001 ff7f 	bl	8008934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a36:	f000 fdfb 	bl	8007630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a3a:	f001 ff4b 	bl	80088d4 <vPortEnterCritical>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d103      	bne.n	8006a54 <xQueueGenericSend+0x16c>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d103      	bne.n	8006a6a <xQueueGenericSend+0x182>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6a:	f001 ff63 	bl	8008934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a6e:	1d3a      	adds	r2, r7, #4
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f88a 	bl	8007b90 <xTaskCheckForTimeOut>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d124      	bne.n	8006acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a84:	f000 fb22 	bl	80070cc <prvIsQueueFull>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d018      	beq.n	8006ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	3310      	adds	r3, #16
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 ffb0 	bl	80079fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9e:	f000 faad 	bl	8006ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aa2:	f000 fdd3 	bl	800764c <xTaskResumeAll>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f47f af7c 	bne.w	80069a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	e772      	b.n	80069a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac2:	f000 fa9b 	bl	8006ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac6:	f000 fdc1 	bl	800764c <xTaskResumeAll>
 8006aca:	e76c      	b.n	80069a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ace:	f000 fa95 	bl	8006ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad2:	f000 fdbb 	bl	800764c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3738      	adds	r7, #56	; 0x38
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b090      	sub	sp, #64	; 0x40
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <xQueueGenericSendFromISR+0x3c>
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueGenericSendFromISR+0x40>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericSendFromISR+0x42>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d103      	bne.n	8006b4e <xQueueGenericSendFromISR+0x6a>
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <xQueueGenericSendFromISR+0x6e>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <xQueueGenericSendFromISR+0x70>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	623b      	str	r3, [r7, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b6e:	f001 ff93 	bl	8008a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b72:	f3ef 8211 	mrs	r2, BASEPRI
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	61fa      	str	r2, [r7, #28]
 8006b88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <xQueueGenericSendFromISR+0xbc>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d12f      	bne.n	8006c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bb6:	f000 f991 	bl	8006edc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d112      	bne.n	8006bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d016      	beq.n	8006bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 ff63 	bl	8007a9c <xTaskRemoveFromEventList>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00e      	beq.n	8006bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e007      	b.n	8006bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bee:	3301      	adds	r3, #1
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	b25a      	sxtb	r2, r3
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006bfe:	e001      	b.n	8006c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3740      	adds	r7, #64	; 0x40
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08c      	sub	sp, #48	; 0x30
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <xQueueReceive+0x30>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	623b      	str	r3, [r7, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <xQueueReceive+0x3e>
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <xQueueReceive+0x42>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueReceive+0x44>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueReceive+0x5e>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61fb      	str	r3, [r7, #28]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c7a:	f001 f8cd 	bl	8007e18 <xTaskGetSchedulerState>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <xQueueReceive+0x6e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <xQueueReceive+0x72>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueReceive+0x74>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueReceive+0x8e>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	61bb      	str	r3, [r7, #24]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006caa:	f001 fe13 	bl	80088d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01f      	beq.n	8006cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbe:	f000 f977 	bl	8006fb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	1e5a      	subs	r2, r3, #1
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00f      	beq.n	8006cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fee0 	bl	8007a9c <xTaskRemoveFromEventList>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ce2:	4b3d      	ldr	r3, [pc, #244]	; (8006dd8 <xQueueReceive+0x1bc>)
 8006ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cf2:	f001 fe1f 	bl	8008934 <vPortExitCritical>
				return pdPASS;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e069      	b.n	8006dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d00:	f001 fe18 	bl	8008934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e062      	b.n	8006dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d0e:	f107 0310 	add.w	r3, r7, #16
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 ff26 	bl	8007b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d1c:	f001 fe0a 	bl	8008934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d20:	f000 fc86 	bl	8007630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d24:	f001 fdd6 	bl	80088d4 <vPortEnterCritical>
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d103      	bne.n	8006d3e <xQueueReceive+0x122>
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d103      	bne.n	8006d54 <xQueueReceive+0x138>
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d54:	f001 fdee 	bl	8008934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d58:	1d3a      	adds	r2, r7, #4
 8006d5a:	f107 0310 	add.w	r3, r7, #16
 8006d5e:	4611      	mov	r1, r2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 ff15 	bl	8007b90 <xTaskCheckForTimeOut>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d123      	bne.n	8006db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 f997 	bl	80070a0 <prvIsQueueEmpty>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d017      	beq.n	8006da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	3324      	adds	r3, #36	; 0x24
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fe3b 	bl	80079fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d88:	f000 f938 	bl	8006ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d8c:	f000 fc5e 	bl	800764c <xTaskResumeAll>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d189      	bne.n	8006caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d96:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <xQueueReceive+0x1bc>)
 8006d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	e780      	b.n	8006caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006daa:	f000 f927 	bl	8006ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dae:	f000 fc4d 	bl	800764c <xTaskResumeAll>
 8006db2:	e77a      	b.n	8006caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db6:	f000 f921 	bl	8006ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dba:	f000 fc47 	bl	800764c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc0:	f000 f96e 	bl	80070a0 <prvIsQueueEmpty>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f43f af6f 	beq.w	8006caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3730      	adds	r7, #48	; 0x30
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	; 0x38
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	623b      	str	r3, [r7, #32]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <xQueueReceiveFromISR+0x3a>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <xQueueReceiveFromISR+0x3e>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <xQueueReceiveFromISR+0x40>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	61fb      	str	r3, [r7, #28]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e36:	f001 fe2f 	bl	8008a98 <vPortValidateInterruptPriority>
	__asm volatile
 8006e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	61ba      	str	r2, [r7, #24]
 8006e50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d02f      	beq.n	8006ec2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e70:	f000 f89e 	bl	8006fb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	1e5a      	subs	r2, r3, #1
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d112      	bne.n	8006eac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d016      	beq.n	8006ebc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	3310      	adds	r3, #16
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fe02 	bl	8007a9c <xTaskRemoveFromEventList>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00e      	beq.n	8006ebc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e007      	b.n	8006ebc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	b25a      	sxtb	r2, r3
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec0:	e001      	b.n	8006ec6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f383 8811 	msr	BASEPRI, r3
}
 8006ed0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3738      	adds	r7, #56	; 0x38
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d14d      	bne.n	8006f9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 ffa4 	bl	8007e54 <xTaskPriorityDisinherit>
 8006f0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	e043      	b.n	8006f9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d119      	bne.n	8006f50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6858      	ldr	r0, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	461a      	mov	r2, r3
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	f002 f804 	bl	8008f34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	441a      	add	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d32b      	bcc.n	8006f9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	605a      	str	r2, [r3, #4]
 8006f4e:	e026      	b.n	8006f9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68d8      	ldr	r0, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	f001 ffea 	bl	8008f34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	425b      	negs	r3, r3
 8006f6a:	441a      	add	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d207      	bcs.n	8006f8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	425b      	negs	r3, r3
 8006f86:	441a      	add	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d105      	bne.n	8006f9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fa6:	697b      	ldr	r3, [r7, #20]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	441a      	add	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d303      	bcc.n	8006fe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68d9      	ldr	r1, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	461a      	mov	r2, r3
 8006fee:	6838      	ldr	r0, [r7, #0]
 8006ff0:	f001 ffa0 	bl	8008f34 <memcpy>
	}
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007004:	f001 fc66 	bl	80088d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007010:	e011      	b.n	8007036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d012      	beq.n	8007040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3324      	adds	r3, #36	; 0x24
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fd3c 	bl	8007a9c <xTaskRemoveFromEventList>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800702a:	f000 fe13 	bl	8007c54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	3b01      	subs	r3, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800703a:	2b00      	cmp	r3, #0
 800703c:	dce9      	bgt.n	8007012 <prvUnlockQueue+0x16>
 800703e:	e000      	b.n	8007042 <prvUnlockQueue+0x46>
					break;
 8007040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800704a:	f001 fc73 	bl	8008934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800704e:	f001 fc41 	bl	80088d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800705a:	e011      	b.n	8007080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d012      	beq.n	800708a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3310      	adds	r3, #16
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fd17 	bl	8007a9c <xTaskRemoveFromEventList>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007074:	f000 fdee 	bl	8007c54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	3b01      	subs	r3, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	dce9      	bgt.n	800705c <prvUnlockQueue+0x60>
 8007088:	e000      	b.n	800708c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800708a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	22ff      	movs	r2, #255	; 0xff
 8007090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007094:	f001 fc4e 	bl	8008934 <vPortExitCritical>
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a8:	f001 fc14 	bl	80088d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e001      	b.n	80070be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070be:	f001 fc39 	bl	8008934 <vPortExitCritical>

	return xReturn;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d4:	f001 fbfe 	bl	80088d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d102      	bne.n	80070ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e001      	b.n	80070ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ee:	f001 fc21 	bl	8008934 <vPortExitCritical>

	return xReturn;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	e014      	b.n	8007136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800710c:	4a0f      	ldr	r2, [pc, #60]	; (800714c <vQueueAddToRegistry+0x50>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10b      	bne.n	8007130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007118:	490c      	ldr	r1, [pc, #48]	; (800714c <vQueueAddToRegistry+0x50>)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007122:	4a0a      	ldr	r2, [pc, #40]	; (800714c <vQueueAddToRegistry+0x50>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800712e:	e006      	b.n	800713e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b07      	cmp	r3, #7
 800713a:	d9e7      	bls.n	800710c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000c98 	.word	0x20000c98

08007150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007160:	f001 fbb8 	bl	80088d4 <vPortEnterCritical>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800716a:	b25b      	sxtb	r3, r3
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d103      	bne.n	800717a <vQueueWaitForMessageRestricted+0x2a>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007180:	b25b      	sxtb	r3, r3
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d103      	bne.n	8007190 <vQueueWaitForMessageRestricted+0x40>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007190:	f001 fbd0 	bl	8008934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d106      	bne.n	80071aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	3324      	adds	r3, #36	; 0x24
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fc4d 	bl	8007a44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f7ff ff26 	bl	8006ffc <prvUnlockQueue>
	}
 80071b0:	bf00      	nop
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08e      	sub	sp, #56	; 0x38
 80071bc:	af04      	add	r7, sp, #16
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	623b      	str	r3, [r7, #32]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <xTaskCreateStatic+0x46>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	61fb      	str	r3, [r7, #28]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071fe:	235c      	movs	r3, #92	; 0x5c
 8007200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b5c      	cmp	r3, #92	; 0x5c
 8007206:	d00a      	beq.n	800721e <xTaskCreateStatic+0x66>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61bb      	str	r3, [r7, #24]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800721e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01e      	beq.n	8007264 <xTaskCreateStatic+0xac>
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01b      	beq.n	8007264 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007234:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	2202      	movs	r2, #2
 800723a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800723e:	2300      	movs	r3, #0
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	f107 0314 	add.w	r3, r7, #20
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f850 	bl	80072fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800725c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800725e:	f000 f8dd 	bl	800741c <prvAddNewTaskToReadyList>
 8007262:	e001      	b.n	8007268 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007268:	697b      	ldr	r3, [r7, #20]
	}
 800726a:	4618      	mov	r0, r3
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007272:	b580      	push	{r7, lr}
 8007274:	b08c      	sub	sp, #48	; 0x30
 8007276:	af04      	add	r7, sp, #16
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fc46 	bl	8008b18 <pvPortMalloc>
 800728c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00e      	beq.n	80072b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007294:	205c      	movs	r0, #92	; 0x5c
 8007296:	f001 fc3f 	bl	8008b18 <pvPortMalloc>
 800729a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
 80072a8:	e005      	b.n	80072b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072aa:	6978      	ldr	r0, [r7, #20]
 80072ac:	f001 fd00 	bl	8008cb0 <vPortFree>
 80072b0:	e001      	b.n	80072b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d017      	beq.n	80072ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	9302      	str	r3, [sp, #8]
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f80e 	bl	80072fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072e0:	69f8      	ldr	r0, [r7, #28]
 80072e2:	f000 f89b 	bl	800741c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072e6:	2301      	movs	r3, #1
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	e002      	b.n	80072f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
 80072f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072f2:	69bb      	ldr	r3, [r7, #24]
	}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	461a      	mov	r2, r3
 8007314:	21a5      	movs	r1, #165	; 0xa5
 8007316:	f001 fe1b 	bl	8008f50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007324:	3b01      	subs	r3, #1
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <prvInitialiseNewTask+0x58>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	617b      	str	r3, [r7, #20]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01f      	beq.n	800739a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800735a:	2300      	movs	r3, #0
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	e012      	b.n	8007386 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	7819      	ldrb	r1, [r3, #0]
 8007368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	3334      	adds	r3, #52	; 0x34
 8007370:	460a      	mov	r2, r1
 8007372:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d006      	beq.n	800738e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	3301      	adds	r3, #1
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	2b0f      	cmp	r3, #15
 800738a:	d9e9      	bls.n	8007360 <prvInitialiseNewTask+0x64>
 800738c:	e000      	b.n	8007390 <prvInitialiseNewTask+0x94>
			{
				break;
 800738e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007398:	e003      	b.n	80073a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	2b37      	cmp	r3, #55	; 0x37
 80073a6:	d901      	bls.n	80073ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073a8:	2337      	movs	r3, #55	; 0x37
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	2200      	movs	r2, #0
 80073bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff f8be 	bl	8006544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	3318      	adds	r3, #24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff f8b9 	bl	8006544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	2200      	movs	r2, #0
 80073ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	69b8      	ldr	r0, [r7, #24]
 80073fc:	f001 f93a 	bl	8008674 <pxPortInitialiseStack>
 8007400:	4602      	mov	r2, r0
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007412:	bf00      	nop
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007424:	f001 fa56 	bl	80088d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007428:	4b2d      	ldr	r3, [pc, #180]	; (80074e0 <prvAddNewTaskToReadyList+0xc4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	4a2c      	ldr	r2, [pc, #176]	; (80074e0 <prvAddNewTaskToReadyList+0xc4>)
 8007430:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007432:	4b2c      	ldr	r3, [pc, #176]	; (80074e4 <prvAddNewTaskToReadyList+0xc8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d109      	bne.n	800744e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800743a:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <prvAddNewTaskToReadyList+0xc8>)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007440:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <prvAddNewTaskToReadyList+0xc4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d110      	bne.n	800746a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007448:	f000 fc28 	bl	8007c9c <prvInitialiseTaskLists>
 800744c:	e00d      	b.n	800746a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800744e:	4b26      	ldr	r3, [pc, #152]	; (80074e8 <prvAddNewTaskToReadyList+0xcc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007456:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <prvAddNewTaskToReadyList+0xc8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	429a      	cmp	r2, r3
 8007462:	d802      	bhi.n	800746a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007464:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <prvAddNewTaskToReadyList+0xc8>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800746a:	4b20      	ldr	r3, [pc, #128]	; (80074ec <prvAddNewTaskToReadyList+0xd0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3301      	adds	r3, #1
 8007470:	4a1e      	ldr	r2, [pc, #120]	; (80074ec <prvAddNewTaskToReadyList+0xd0>)
 8007472:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007474:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <prvAddNewTaskToReadyList+0xd0>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4b1b      	ldr	r3, [pc, #108]	; (80074f0 <prvAddNewTaskToReadyList+0xd4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d903      	bls.n	8007490 <prvAddNewTaskToReadyList+0x74>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a18      	ldr	r2, [pc, #96]	; (80074f0 <prvAddNewTaskToReadyList+0xd4>)
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <prvAddNewTaskToReadyList+0xd8>)
 800749e:	441a      	add	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f7ff f859 	bl	800655e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074ac:	f001 fa42 	bl	8008934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074b0:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <prvAddNewTaskToReadyList+0xcc>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00e      	beq.n	80074d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <prvAddNewTaskToReadyList+0xc8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d207      	bcs.n	80074d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvAddNewTaskToReadyList+0xdc>)
 80074c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200011ac 	.word	0x200011ac
 80074e4:	20000cd8 	.word	0x20000cd8
 80074e8:	200011b8 	.word	0x200011b8
 80074ec:	200011c8 	.word	0x200011c8
 80074f0:	200011b4 	.word	0x200011b4
 80074f4:	20000cdc 	.word	0x20000cdc
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d017      	beq.n	800753e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800750e:	4b13      	ldr	r3, [pc, #76]	; (800755c <vTaskDelay+0x60>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <vTaskDelay+0x30>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60bb      	str	r3, [r7, #8]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800752c:	f000 f880 	bl	8007630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007530:	2100      	movs	r1, #0
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fcfc 	bl	8007f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007538:	f000 f888 	bl	800764c <xTaskResumeAll>
 800753c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d107      	bne.n	8007554 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <vTaskDelay+0x64>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	200011d4 	.word	0x200011d4
 8007560:	e000ed04 	.word	0xe000ed04

08007564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08a      	sub	sp, #40	; 0x28
 8007568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007572:	463a      	mov	r2, r7
 8007574:	1d39      	adds	r1, r7, #4
 8007576:	f107 0308 	add.w	r3, r7, #8
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe ff8e 	bl	800649c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	9202      	str	r2, [sp, #8]
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	2300      	movs	r3, #0
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2300      	movs	r3, #0
 8007590:	460a      	mov	r2, r1
 8007592:	4921      	ldr	r1, [pc, #132]	; (8007618 <vTaskStartScheduler+0xb4>)
 8007594:	4821      	ldr	r0, [pc, #132]	; (800761c <vTaskStartScheduler+0xb8>)
 8007596:	f7ff fe0f 	bl	80071b8 <xTaskCreateStatic>
 800759a:	4603      	mov	r3, r0
 800759c:	4a20      	ldr	r2, [pc, #128]	; (8007620 <vTaskStartScheduler+0xbc>)
 800759e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075a0:	4b1f      	ldr	r3, [pc, #124]	; (8007620 <vTaskStartScheduler+0xbc>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075a8:	2301      	movs	r3, #1
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	e001      	b.n	80075b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d102      	bne.n	80075be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075b8:	f000 fd0e 	bl	8007fd8 <xTimerCreateTimerTask>
 80075bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d116      	bne.n	80075f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	613b      	str	r3, [r7, #16]
}
 80075d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075d8:	4b12      	ldr	r3, [pc, #72]	; (8007624 <vTaskStartScheduler+0xc0>)
 80075da:	f04f 32ff 	mov.w	r2, #4294967295
 80075de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075e0:	4b11      	ldr	r3, [pc, #68]	; (8007628 <vTaskStartScheduler+0xc4>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075e6:	4b11      	ldr	r3, [pc, #68]	; (800762c <vTaskStartScheduler+0xc8>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075ec:	f001 f8d0 	bl	8008790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075f0:	e00e      	b.n	8007610 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d10a      	bne.n	8007610 <vTaskStartScheduler+0xac>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	60fb      	str	r3, [r7, #12]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <vTaskStartScheduler+0xaa>
}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	08008f84 	.word	0x08008f84
 800761c:	08007c6d 	.word	0x08007c6d
 8007620:	200011d0 	.word	0x200011d0
 8007624:	200011cc 	.word	0x200011cc
 8007628:	200011b8 	.word	0x200011b8
 800762c:	200011b0 	.word	0x200011b0

08007630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <vTaskSuspendAll+0x18>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3301      	adds	r3, #1
 800763a:	4a03      	ldr	r2, [pc, #12]	; (8007648 <vTaskSuspendAll+0x18>)
 800763c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800763e:	bf00      	nop
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	200011d4 	.word	0x200011d4

0800764c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800765a:	4b42      	ldr	r3, [pc, #264]	; (8007764 <xTaskResumeAll+0x118>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <xTaskResumeAll+0x2c>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	603b      	str	r3, [r7, #0]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007678:	f001 f92c 	bl	80088d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800767c:	4b39      	ldr	r3, [pc, #228]	; (8007764 <xTaskResumeAll+0x118>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3b01      	subs	r3, #1
 8007682:	4a38      	ldr	r2, [pc, #224]	; (8007764 <xTaskResumeAll+0x118>)
 8007684:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007686:	4b37      	ldr	r3, [pc, #220]	; (8007764 <xTaskResumeAll+0x118>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d162      	bne.n	8007754 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800768e:	4b36      	ldr	r3, [pc, #216]	; (8007768 <xTaskResumeAll+0x11c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d05e      	beq.n	8007754 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007696:	e02f      	b.n	80076f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007698:	4b34      	ldr	r3, [pc, #208]	; (800776c <xTaskResumeAll+0x120>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3318      	adds	r3, #24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe ffb7 	bl	8006618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe ffb2 	bl	8006618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <xTaskResumeAll+0x124>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d903      	bls.n	80076c8 <xTaskResumeAll+0x7c>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <xTaskResumeAll+0x124>)
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4a27      	ldr	r2, [pc, #156]	; (8007774 <xTaskResumeAll+0x128>)
 80076d6:	441a      	add	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7fe ff3d 	bl	800655e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e8:	4b23      	ldr	r3, [pc, #140]	; (8007778 <xTaskResumeAll+0x12c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d302      	bcc.n	80076f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076f2:	4b22      	ldr	r3, [pc, #136]	; (800777c <xTaskResumeAll+0x130>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076f8:	4b1c      	ldr	r3, [pc, #112]	; (800776c <xTaskResumeAll+0x120>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1cb      	bne.n	8007698 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007706:	f000 fb67 	bl	8007dd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800770a:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <xTaskResumeAll+0x134>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d010      	beq.n	8007738 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007716:	f000 f859 	bl	80077cc <xTaskIncrementTick>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007720:	4b16      	ldr	r3, [pc, #88]	; (800777c <xTaskResumeAll+0x130>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3b01      	subs	r3, #1
 800772a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f1      	bne.n	8007716 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007732:	4b13      	ldr	r3, [pc, #76]	; (8007780 <xTaskResumeAll+0x134>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <xTaskResumeAll+0x130>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <xTaskResumeAll+0x138>)
 8007746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007754:	f001 f8ee 	bl	8008934 <vPortExitCritical>

	return xAlreadyYielded;
 8007758:	68bb      	ldr	r3, [r7, #8]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200011d4 	.word	0x200011d4
 8007768:	200011ac 	.word	0x200011ac
 800776c:	2000116c 	.word	0x2000116c
 8007770:	200011b4 	.word	0x200011b4
 8007774:	20000cdc 	.word	0x20000cdc
 8007778:	20000cd8 	.word	0x20000cd8
 800777c:	200011c0 	.word	0x200011c0
 8007780:	200011bc 	.word	0x200011bc
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <xTaskGetTickCount+0x1c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007794:	687b      	ldr	r3, [r7, #4]
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	200011b0 	.word	0x200011b0

080077a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ae:	f001 f973 	bl	8008a98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80077b6:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <xTaskGetTickCountFromISR+0x20>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077bc:	683b      	ldr	r3, [r7, #0]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	200011b0 	.word	0x200011b0

080077cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d6:	4b4f      	ldr	r3, [pc, #316]	; (8007914 <xTaskIncrementTick+0x148>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 808f 	bne.w	80078fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077e0:	4b4d      	ldr	r3, [pc, #308]	; (8007918 <xTaskIncrementTick+0x14c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077e8:	4a4b      	ldr	r2, [pc, #300]	; (8007918 <xTaskIncrementTick+0x14c>)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d120      	bne.n	8007836 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077f4:	4b49      	ldr	r3, [pc, #292]	; (800791c <xTaskIncrementTick+0x150>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <xTaskIncrementTick+0x48>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	603b      	str	r3, [r7, #0]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <xTaskIncrementTick+0x46>
 8007814:	4b41      	ldr	r3, [pc, #260]	; (800791c <xTaskIncrementTick+0x150>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	4b41      	ldr	r3, [pc, #260]	; (8007920 <xTaskIncrementTick+0x154>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a3f      	ldr	r2, [pc, #252]	; (800791c <xTaskIncrementTick+0x150>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	4a3f      	ldr	r2, [pc, #252]	; (8007920 <xTaskIncrementTick+0x154>)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	4b3e      	ldr	r3, [pc, #248]	; (8007924 <xTaskIncrementTick+0x158>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	4a3d      	ldr	r2, [pc, #244]	; (8007924 <xTaskIncrementTick+0x158>)
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	f000 fad1 	bl	8007dd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007836:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <xTaskIncrementTick+0x15c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	429a      	cmp	r2, r3
 800783e:	d349      	bcc.n	80078d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007840:	4b36      	ldr	r3, [pc, #216]	; (800791c <xTaskIncrementTick+0x150>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784a:	4b37      	ldr	r3, [pc, #220]	; (8007928 <xTaskIncrementTick+0x15c>)
 800784c:	f04f 32ff 	mov.w	r2, #4294967295
 8007850:	601a      	str	r2, [r3, #0]
					break;
 8007852:	e03f      	b.n	80078d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007854:	4b31      	ldr	r3, [pc, #196]	; (800791c <xTaskIncrementTick+0x150>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d203      	bcs.n	8007874 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800786c:	4a2e      	ldr	r2, [pc, #184]	; (8007928 <xTaskIncrementTick+0x15c>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007872:	e02f      	b.n	80078d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	3304      	adds	r3, #4
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fecd 	bl	8006618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	3318      	adds	r3, #24
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe fec4 	bl	8006618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <xTaskIncrementTick+0x160>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d903      	bls.n	80078a4 <xTaskIncrementTick+0xd8>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a22      	ldr	r2, [pc, #136]	; (800792c <xTaskIncrementTick+0x160>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <xTaskIncrementTick+0x164>)
 80078b2:	441a      	add	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe fe4f 	bl	800655e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c4:	4b1b      	ldr	r3, [pc, #108]	; (8007934 <xTaskIncrementTick+0x168>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d3b8      	bcc.n	8007840 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078ce:	2301      	movs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078d2:	e7b5      	b.n	8007840 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078d4:	4b17      	ldr	r3, [pc, #92]	; (8007934 <xTaskIncrementTick+0x168>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	4915      	ldr	r1, [pc, #84]	; (8007930 <xTaskIncrementTick+0x164>)
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d901      	bls.n	80078f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078f0:	4b11      	ldr	r3, [pc, #68]	; (8007938 <xTaskIncrementTick+0x16c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80078f8:	2301      	movs	r3, #1
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	e004      	b.n	8007908 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <xTaskIncrementTick+0x170>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	4a0d      	ldr	r2, [pc, #52]	; (800793c <xTaskIncrementTick+0x170>)
 8007906:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007908:	697b      	ldr	r3, [r7, #20]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200011d4 	.word	0x200011d4
 8007918:	200011b0 	.word	0x200011b0
 800791c:	20001164 	.word	0x20001164
 8007920:	20001168 	.word	0x20001168
 8007924:	200011c4 	.word	0x200011c4
 8007928:	200011cc 	.word	0x200011cc
 800792c:	200011b4 	.word	0x200011b4
 8007930:	20000cdc 	.word	0x20000cdc
 8007934:	20000cd8 	.word	0x20000cd8
 8007938:	200011c0 	.word	0x200011c0
 800793c:	200011bc 	.word	0x200011bc

08007940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007946:	4b28      	ldr	r3, [pc, #160]	; (80079e8 <vTaskSwitchContext+0xa8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800794e:	4b27      	ldr	r3, [pc, #156]	; (80079ec <vTaskSwitchContext+0xac>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007954:	e041      	b.n	80079da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007956:	4b25      	ldr	r3, [pc, #148]	; (80079ec <vTaskSwitchContext+0xac>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795c:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <vTaskSwitchContext+0xb0>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	e010      	b.n	8007986 <vTaskSwitchContext+0x46>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <vTaskSwitchContext+0x40>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	607b      	str	r3, [r7, #4]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vTaskSwitchContext+0x3e>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3b01      	subs	r3, #1
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	491b      	ldr	r1, [pc, #108]	; (80079f4 <vTaskSwitchContext+0xb4>)
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4613      	mov	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	440b      	add	r3, r1
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0e4      	beq.n	8007964 <vTaskSwitchContext+0x24>
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4a13      	ldr	r2, [pc, #76]	; (80079f4 <vTaskSwitchContext+0xb4>)
 80079a6:	4413      	add	r3, r2
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	605a      	str	r2, [r3, #4]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3308      	adds	r3, #8
 80079bc:	429a      	cmp	r2, r3
 80079be:	d104      	bne.n	80079ca <vTaskSwitchContext+0x8a>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4a09      	ldr	r2, [pc, #36]	; (80079f8 <vTaskSwitchContext+0xb8>)
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4a06      	ldr	r2, [pc, #24]	; (80079f0 <vTaskSwitchContext+0xb0>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6013      	str	r3, [r2, #0]
}
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	200011d4 	.word	0x200011d4
 80079ec:	200011c0 	.word	0x200011c0
 80079f0:	200011b4 	.word	0x200011b4
 80079f4:	20000cdc 	.word	0x20000cdc
 80079f8:	20000cd8 	.word	0x20000cd8

080079fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	60fb      	str	r3, [r7, #12]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a22:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <vTaskPlaceOnEventList+0x44>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3318      	adds	r3, #24
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fe fdbb 	bl	80065a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a30:	2101      	movs	r1, #1
 8007a32:	6838      	ldr	r0, [r7, #0]
 8007a34:	f000 fa7c 	bl	8007f30 <prvAddCurrentTaskToDelayedList>
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000cd8 	.word	0x20000cd8

08007a44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	617b      	str	r3, [r7, #20]
}
 8007a68:	bf00      	nop
 8007a6a:	e7fe      	b.n	8007a6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3318      	adds	r3, #24
 8007a72:	4619      	mov	r1, r3
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7fe fd72 	bl	800655e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a80:	f04f 33ff 	mov.w	r3, #4294967295
 8007a84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	68b8      	ldr	r0, [r7, #8]
 8007a8a:	f000 fa51 	bl	8007f30 <prvAddCurrentTaskToDelayedList>
	}
 8007a8e:	bf00      	nop
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20000cd8 	.word	0x20000cd8

08007a9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	60fb      	str	r3, [r7, #12]
}
 8007ac4:	bf00      	nop
 8007ac6:	e7fe      	b.n	8007ac6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3318      	adds	r3, #24
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fda3 	bl	8006618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad2:	4b1e      	ldr	r3, [pc, #120]	; (8007b4c <xTaskRemoveFromEventList+0xb0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d11d      	bne.n	8007b16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fd9a 	bl	8006618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae8:	4b19      	ldr	r3, [pc, #100]	; (8007b50 <xTaskRemoveFromEventList+0xb4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d903      	bls.n	8007af8 <xTaskRemoveFromEventList+0x5c>
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a16      	ldr	r2, [pc, #88]	; (8007b50 <xTaskRemoveFromEventList+0xb4>)
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <xTaskRemoveFromEventList+0xb8>)
 8007b06:	441a      	add	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	f7fe fd25 	bl	800655e <vListInsertEnd>
 8007b14:	e005      	b.n	8007b22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3318      	adds	r3, #24
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	480e      	ldr	r0, [pc, #56]	; (8007b58 <xTaskRemoveFromEventList+0xbc>)
 8007b1e:	f7fe fd1e 	bl	800655e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <xTaskRemoveFromEventList+0xc0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d905      	bls.n	8007b3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b34:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <xTaskRemoveFromEventList+0xc4>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e001      	b.n	8007b40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b40:	697b      	ldr	r3, [r7, #20]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200011d4 	.word	0x200011d4
 8007b50:	200011b4 	.word	0x200011b4
 8007b54:	20000cdc 	.word	0x20000cdc
 8007b58:	2000116c 	.word	0x2000116c
 8007b5c:	20000cd8 	.word	0x20000cd8
 8007b60:	200011c0 	.word	0x200011c0

08007b64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <vTaskInternalSetTimeOutState+0x24>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <vTaskInternalSetTimeOutState+0x28>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	605a      	str	r2, [r3, #4]
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	200011c4 	.word	0x200011c4
 8007b8c:	200011b0 	.word	0x200011b0

08007b90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	613b      	str	r3, [r7, #16]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60fb      	str	r3, [r7, #12]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007bd2:	f000 fe7f 	bl	80088d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bd6:	4b1d      	ldr	r3, [pc, #116]	; (8007c4c <xTaskCheckForTimeOut+0xbc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d102      	bne.n	8007bf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	e023      	b.n	8007c3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <xTaskCheckForTimeOut+0xc0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d007      	beq.n	8007c12 <xTaskCheckForTimeOut+0x82>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	e015      	b.n	8007c3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d20b      	bcs.n	8007c34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ff9b 	bl	8007b64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	e004      	b.n	8007c3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c3e:	f000 fe79 	bl	8008934 <vPortExitCritical>

	return xReturn;
 8007c42:	69fb      	ldr	r3, [r7, #28]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3720      	adds	r7, #32
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	200011b0 	.word	0x200011b0
 8007c50:	200011c4 	.word	0x200011c4

08007c54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c58:	4b03      	ldr	r3, [pc, #12]	; (8007c68 <vTaskMissedYield+0x14>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	200011c0 	.word	0x200011c0

08007c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c74:	f000 f852 	bl	8007d1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <prvIdleTask+0x28>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d9f9      	bls.n	8007c74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <prvIdleTask+0x2c>)
 8007c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c90:	e7f0      	b.n	8007c74 <prvIdleTask+0x8>
 8007c92:	bf00      	nop
 8007c94:	20000cdc 	.word	0x20000cdc
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	607b      	str	r3, [r7, #4]
 8007ca6:	e00c      	b.n	8007cc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4a12      	ldr	r2, [pc, #72]	; (8007cfc <prvInitialiseTaskLists+0x60>)
 8007cb4:	4413      	add	r3, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fc24 	bl	8006504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	607b      	str	r3, [r7, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b37      	cmp	r3, #55	; 0x37
 8007cc6:	d9ef      	bls.n	8007ca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cc8:	480d      	ldr	r0, [pc, #52]	; (8007d00 <prvInitialiseTaskLists+0x64>)
 8007cca:	f7fe fc1b 	bl	8006504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cce:	480d      	ldr	r0, [pc, #52]	; (8007d04 <prvInitialiseTaskLists+0x68>)
 8007cd0:	f7fe fc18 	bl	8006504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cd4:	480c      	ldr	r0, [pc, #48]	; (8007d08 <prvInitialiseTaskLists+0x6c>)
 8007cd6:	f7fe fc15 	bl	8006504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cda:	480c      	ldr	r0, [pc, #48]	; (8007d0c <prvInitialiseTaskLists+0x70>)
 8007cdc:	f7fe fc12 	bl	8006504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ce0:	480b      	ldr	r0, [pc, #44]	; (8007d10 <prvInitialiseTaskLists+0x74>)
 8007ce2:	f7fe fc0f 	bl	8006504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <prvInitialiseTaskLists+0x78>)
 8007ce8:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <prvInitialiseTaskLists+0x64>)
 8007cea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <prvInitialiseTaskLists+0x7c>)
 8007cee:	4a05      	ldr	r2, [pc, #20]	; (8007d04 <prvInitialiseTaskLists+0x68>)
 8007cf0:	601a      	str	r2, [r3, #0]
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000cdc 	.word	0x20000cdc
 8007d00:	2000113c 	.word	0x2000113c
 8007d04:	20001150 	.word	0x20001150
 8007d08:	2000116c 	.word	0x2000116c
 8007d0c:	20001180 	.word	0x20001180
 8007d10:	20001198 	.word	0x20001198
 8007d14:	20001164 	.word	0x20001164
 8007d18:	20001168 	.word	0x20001168

08007d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d22:	e019      	b.n	8007d58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d24:	f000 fdd6 	bl	80088d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d28:	4b10      	ldr	r3, [pc, #64]	; (8007d6c <prvCheckTasksWaitingTermination+0x50>)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe fc6f 	bl	8006618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <prvCheckTasksWaitingTermination+0x54>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	4a0b      	ldr	r2, [pc, #44]	; (8007d70 <prvCheckTasksWaitingTermination+0x54>)
 8007d42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d44:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <prvCheckTasksWaitingTermination+0x58>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <prvCheckTasksWaitingTermination+0x58>)
 8007d4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d4e:	f000 fdf1 	bl	8008934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f810 	bl	8007d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d58:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <prvCheckTasksWaitingTermination+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e1      	bne.n	8007d24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d60:	bf00      	nop
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20001180 	.word	0x20001180
 8007d70:	200011ac 	.word	0x200011ac
 8007d74:	20001194 	.word	0x20001194

08007d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d108      	bne.n	8007d9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 ff8e 	bl	8008cb0 <vPortFree>
				vPortFree( pxTCB );
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 ff8b 	bl	8008cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d9a:	e018      	b.n	8007dce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d103      	bne.n	8007dae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 ff82 	bl	8008cb0 <vPortFree>
	}
 8007dac:	e00f      	b.n	8007dce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d00a      	beq.n	8007dce <prvDeleteTCB+0x56>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	60fb      	str	r3, [r7, #12]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <prvDeleteTCB+0x54>
	}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dde:	4b0c      	ldr	r3, [pc, #48]	; (8007e10 <prvResetNextTaskUnblockTime+0x38>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <prvResetNextTaskUnblockTime+0x3c>)
 8007dea:	f04f 32ff 	mov.w	r2, #4294967295
 8007dee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007df0:	e008      	b.n	8007e04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <prvResetNextTaskUnblockTime+0x38>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <prvResetNextTaskUnblockTime+0x3c>)
 8007e02:	6013      	str	r3, [r2, #0]
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	20001164 	.word	0x20001164
 8007e14:	200011cc 	.word	0x200011cc

08007e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <xTaskGetSchedulerState+0x34>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e26:	2301      	movs	r3, #1
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	e008      	b.n	8007e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <xTaskGetSchedulerState+0x38>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e34:	2302      	movs	r3, #2
 8007e36:	607b      	str	r3, [r7, #4]
 8007e38:	e001      	b.n	8007e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e3e:	687b      	ldr	r3, [r7, #4]
	}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	200011b8 	.word	0x200011b8
 8007e50:	200011d4 	.word	0x200011d4

08007e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d056      	beq.n	8007f18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e6a:	4b2e      	ldr	r3, [pc, #184]	; (8007f24 <xTaskPriorityDisinherit+0xd0>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d00a      	beq.n	8007e8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	60fb      	str	r3, [r7, #12]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	60bb      	str	r3, [r7, #8]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eac:	1e5a      	subs	r2, r3, #1
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d02c      	beq.n	8007f18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d128      	bne.n	8007f18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fba4 	bl	8006618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee8:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <xTaskPriorityDisinherit+0xd4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d903      	bls.n	8007ef8 <xTaskPriorityDisinherit+0xa4>
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	4a0c      	ldr	r2, [pc, #48]	; (8007f28 <xTaskPriorityDisinherit+0xd4>)
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <xTaskPriorityDisinherit+0xd8>)
 8007f06:	441a      	add	r2, r3
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f7fe fb25 	bl	800655e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f18:	697b      	ldr	r3, [r7, #20]
	}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000cd8 	.word	0x20000cd8
 8007f28:	200011b4 	.word	0x200011b4
 8007f2c:	20000cdc 	.word	0x20000cdc

08007f30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f3a:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f40:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3304      	adds	r3, #4
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe fb66 	bl	8006618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d10a      	bne.n	8007f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f5a:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4619      	mov	r1, r3
 8007f62:	4819      	ldr	r0, [pc, #100]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f64:	f7fe fafb 	bl	800655e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f68:	e026      	b.n	8007fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4413      	add	r3, r2
 8007f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d209      	bcs.n	8007f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f7fe fb09 	bl	80065a6 <vListInsert>
}
 8007f94:	e010      	b.n	8007fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f7fe faff 	bl	80065a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d202      	bcs.n	8007fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fb2:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	6013      	str	r3, [r2, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	200011b0 	.word	0x200011b0
 8007fc4:	20000cd8 	.word	0x20000cd8
 8007fc8:	20001198 	.word	0x20001198
 8007fcc:	20001168 	.word	0x20001168
 8007fd0:	20001164 	.word	0x20001164
 8007fd4:	200011cc 	.word	0x200011cc

08007fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fe2:	f000 fb07 	bl	80085f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fe6:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <xTimerCreateTimerTask+0x80>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d021      	beq.n	8008032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ff6:	1d3a      	adds	r2, r7, #4
 8007ff8:	f107 0108 	add.w	r1, r7, #8
 8007ffc:	f107 030c 	add.w	r3, r7, #12
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fa65 	bl	80064d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	9202      	str	r2, [sp, #8]
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	2302      	movs	r3, #2
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	2300      	movs	r3, #0
 8008016:	460a      	mov	r2, r1
 8008018:	4910      	ldr	r1, [pc, #64]	; (800805c <xTimerCreateTimerTask+0x84>)
 800801a:	4811      	ldr	r0, [pc, #68]	; (8008060 <xTimerCreateTimerTask+0x88>)
 800801c:	f7ff f8cc 	bl	80071b8 <xTaskCreateStatic>
 8008020:	4603      	mov	r3, r0
 8008022:	4a10      	ldr	r2, [pc, #64]	; (8008064 <xTimerCreateTimerTask+0x8c>)
 8008024:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008026:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <xTimerCreateTimerTask+0x8c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800802e:	2301      	movs	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	613b      	str	r3, [r7, #16]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800804e:	697b      	ldr	r3, [r7, #20]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20001208 	.word	0x20001208
 800805c:	08008f8c 	.word	0x08008f8c
 8008060:	0800819d 	.word	0x0800819d
 8008064:	2000120c 	.word	0x2000120c

08008068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008076:	2300      	movs	r3, #0
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	623b      	str	r3, [r7, #32]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <xTimerGenericCommand+0x98>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d02a      	beq.n	80080f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	dc18      	bgt.n	80080e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080b0:	f7ff feb2 	bl	8007e18 <xTaskGetSchedulerState>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d109      	bne.n	80080ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080ba:	4b11      	ldr	r3, [pc, #68]	; (8008100 <xTimerGenericCommand+0x98>)
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f107 0110 	add.w	r1, r7, #16
 80080c2:	2300      	movs	r3, #0
 80080c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c6:	f7fe fc0f 	bl	80068e8 <xQueueGenericSend>
 80080ca:	6278      	str	r0, [r7, #36]	; 0x24
 80080cc:	e012      	b.n	80080f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <xTimerGenericCommand+0x98>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f107 0110 	add.w	r1, r7, #16
 80080d6:	2300      	movs	r3, #0
 80080d8:	2200      	movs	r2, #0
 80080da:	f7fe fc05 	bl	80068e8 <xQueueGenericSend>
 80080de:	6278      	str	r0, [r7, #36]	; 0x24
 80080e0:	e008      	b.n	80080f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <xTimerGenericCommand+0x98>)
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	f107 0110 	add.w	r1, r7, #16
 80080ea:	2300      	movs	r3, #0
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	f7fe fcf9 	bl	8006ae4 <xQueueGenericSendFromISR>
 80080f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20001208 	.word	0x20001208

08008104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af02      	add	r7, sp, #8
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810e:	4b22      	ldr	r3, [pc, #136]	; (8008198 <prvProcessExpiredTimer+0x94>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3304      	adds	r3, #4
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fa7b 	bl	8006618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d022      	beq.n	8008176 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	699a      	ldr	r2, [r3, #24]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	18d1      	adds	r1, r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	6978      	ldr	r0, [r7, #20]
 800813e:	f000 f8d1 	bl	80082e4 <prvInsertTimerInActiveList>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01f      	beq.n	8008188 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008148:	2300      	movs	r3, #0
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	2100      	movs	r1, #0
 8008152:	6978      	ldr	r0, [r7, #20]
 8008154:	f7ff ff88 	bl	8008068 <xTimerGenericCommand>
 8008158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d113      	bne.n	8008188 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60fb      	str	r3, [r7, #12]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	b2da      	uxtb	r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	6978      	ldr	r0, [r7, #20]
 800818e:	4798      	blx	r3
}
 8008190:	bf00      	nop
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	20001200 	.word	0x20001200

0800819c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 f857 	bl	800825c <prvGetNextExpireTime>
 80081ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4619      	mov	r1, r3
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f803 	bl	80081c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081ba:	f000 f8d5 	bl	8008368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081be:	e7f1      	b.n	80081a4 <prvTimerTask+0x8>

080081c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081ca:	f7ff fa31 	bl	8007630 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f866 	bl	80082a4 <prvSampleTimeNow>
 80081d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d130      	bne.n	8008242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <prvProcessTimerOrBlockTask+0x3c>
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d806      	bhi.n	80081fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081ee:	f7ff fa2d 	bl	800764c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff ff85 	bl	8008104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081fa:	e024      	b.n	8008246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d008      	beq.n	8008214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008202:	4b13      	ldr	r3, [pc, #76]	; (8008250 <prvProcessTimerOrBlockTask+0x90>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <prvProcessTimerOrBlockTask+0x50>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <prvProcessTimerOrBlockTask+0x52>
 8008210:	2300      	movs	r3, #0
 8008212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008214:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <prvProcessTimerOrBlockTask+0x94>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4619      	mov	r1, r3
 8008222:	f7fe ff95 	bl	8007150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008226:	f7ff fa11 	bl	800764c <xTaskResumeAll>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10a      	bne.n	8008246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <prvProcessTimerOrBlockTask+0x98>)
 8008232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
}
 8008240:	e001      	b.n	8008246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008242:	f7ff fa03 	bl	800764c <xTaskResumeAll>
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20001204 	.word	0x20001204
 8008254:	20001208 	.word	0x20001208
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <prvGetNextExpireTime+0x44>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <prvGetNextExpireTime+0x16>
 800826e:	2201      	movs	r2, #1
 8008270:	e000      	b.n	8008274 <prvGetNextExpireTime+0x18>
 8008272:	2200      	movs	r2, #0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d105      	bne.n	800828c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <prvGetNextExpireTime+0x44>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	e001      	b.n	8008290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008290:	68fb      	ldr	r3, [r7, #12]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20001200 	.word	0x20001200

080082a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082ac:	f7ff fa6c 	bl	8007788 <xTaskGetTickCount>
 80082b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <prvSampleTimeNow+0x3c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d205      	bcs.n	80082c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082bc:	f000 f936 	bl	800852c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e002      	b.n	80082ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082ce:	4a04      	ldr	r2, [pc, #16]	; (80082e0 <prvSampleTimeNow+0x3c>)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082d4:	68fb      	ldr	r3, [r7, #12]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20001210 	.word	0x20001210

080082e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d812      	bhi.n	8008330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e01b      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800831e:	4b10      	ldr	r3, [pc, #64]	; (8008360 <prvInsertTimerInActiveList+0x7c>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe f93c 	bl	80065a6 <vListInsert>
 800832e:	e012      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d206      	bcs.n	8008346 <prvInsertTimerInActiveList+0x62>
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e007      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <prvInsertTimerInActiveList+0x80>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fe f928 	bl	80065a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008356:	697b      	ldr	r3, [r7, #20]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20001204 	.word	0x20001204
 8008364:	20001200 	.word	0x20001200

08008368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08e      	sub	sp, #56	; 0x38
 800836c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800836e:	e0ca      	b.n	8008506 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	da18      	bge.n	80083a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008376:	1d3b      	adds	r3, r7, #4
 8008378:	3304      	adds	r3, #4
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	61fb      	str	r3, [r7, #28]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839e:	6850      	ldr	r0, [r2, #4]
 80083a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a2:	6892      	ldr	r2, [r2, #8]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f2c0 80aa 	blt.w	8008504 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	3304      	adds	r3, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe f929 	bl	8006618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083c6:	463b      	mov	r3, r7
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff ff6b 	bl	80082a4 <prvSampleTimeNow>
 80083ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	f200 8097 	bhi.w	8008506 <prvProcessReceivedCommands+0x19e>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <prvProcessReceivedCommands+0x78>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008409 	.word	0x08008409
 80083e8:	08008409 	.word	0x08008409
 80083ec:	0800847d 	.word	0x0800847d
 80083f0:	08008491 	.word	0x08008491
 80083f4:	080084db 	.word	0x080084db
 80083f8:	08008409 	.word	0x08008409
 80083fc:	08008409 	.word	0x08008409
 8008400:	0800847d 	.word	0x0800847d
 8008404:	08008491 	.word	0x08008491
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	b2da      	uxtb	r2, r3
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	18d1      	adds	r1, r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008428:	f7ff ff5c 	bl	80082e4 <prvInsertTimerInActiveList>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d069      	beq.n	8008506 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d05e      	beq.n	8008506 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	441a      	add	r2, r3
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	2100      	movs	r1, #0
 8008458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800845a:	f7ff fe05 	bl	8008068 <xTimerGenericCommand>
 800845e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d14f      	bne.n	8008506 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	61bb      	str	r3, [r7, #24]
}
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	b2da      	uxtb	r2, r3
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800848e:	e03a      	b.n	8008506 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	b2da      	uxtb	r2, r3
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	617b      	str	r3, [r7, #20]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	18d1      	adds	r1, r2, r3
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d4:	f7ff ff06 	bl	80082e4 <prvInsertTimerInActiveList>
					break;
 80084d8:	e015      	b.n	8008506 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d103      	bne.n	80084f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80084e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ea:	f000 fbe1 	bl	8008cb0 <vPortFree>
 80084ee:	e00a      	b.n	8008506 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084f6:	f023 0301 	bic.w	r3, r3, #1
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008502:	e000      	b.n	8008506 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008504:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008506:	4b08      	ldr	r3, [pc, #32]	; (8008528 <prvProcessReceivedCommands+0x1c0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	1d39      	adds	r1, r7, #4
 800850c:	2200      	movs	r2, #0
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fb84 	bl	8006c1c <xQueueReceive>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	f47f af2a 	bne.w	8008370 <prvProcessReceivedCommands+0x8>
	}
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	3730      	adds	r7, #48	; 0x30
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20001208 	.word	0x20001208

0800852c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008532:	e048      	b.n	80085c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008534:	4b2d      	ldr	r3, [pc, #180]	; (80085ec <prvSwitchTimerLists+0xc0>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853e:	4b2b      	ldr	r3, [pc, #172]	; (80085ec <prvSwitchTimerLists+0xc0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3304      	adds	r3, #4
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe f863 	bl	8006618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d02e      	beq.n	80085c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4413      	add	r3, r2
 8008570:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	429a      	cmp	r2, r3
 8008578:	d90e      	bls.n	8008598 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008586:	4b19      	ldr	r3, [pc, #100]	; (80085ec <prvSwitchTimerLists+0xc0>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3304      	adds	r3, #4
 800858e:	4619      	mov	r1, r3
 8008590:	4610      	mov	r0, r2
 8008592:	f7fe f808 	bl	80065a6 <vListInsert>
 8008596:	e016      	b.n	80085c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008598:	2300      	movs	r3, #0
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2300      	movs	r3, #0
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	2100      	movs	r1, #0
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fd60 	bl	8008068 <xTimerGenericCommand>
 80085a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	603b      	str	r3, [r7, #0]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085c6:	4b09      	ldr	r3, [pc, #36]	; (80085ec <prvSwitchTimerLists+0xc0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1b1      	bne.n	8008534 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <prvSwitchTimerLists+0xc0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085d6:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <prvSwitchTimerLists+0xc4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a04      	ldr	r2, [pc, #16]	; (80085ec <prvSwitchTimerLists+0xc0>)
 80085dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085de:	4a04      	ldr	r2, [pc, #16]	; (80085f0 <prvSwitchTimerLists+0xc4>)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	6013      	str	r3, [r2, #0]
}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20001200 	.word	0x20001200
 80085f0:	20001204 	.word	0x20001204

080085f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085fa:	f000 f96b 	bl	80088d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085fe:	4b15      	ldr	r3, [pc, #84]	; (8008654 <prvCheckForValidListAndQueue+0x60>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d120      	bne.n	8008648 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008606:	4814      	ldr	r0, [pc, #80]	; (8008658 <prvCheckForValidListAndQueue+0x64>)
 8008608:	f7fd ff7c 	bl	8006504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800860c:	4813      	ldr	r0, [pc, #76]	; (800865c <prvCheckForValidListAndQueue+0x68>)
 800860e:	f7fd ff79 	bl	8006504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <prvCheckForValidListAndQueue+0x6c>)
 8008614:	4a10      	ldr	r2, [pc, #64]	; (8008658 <prvCheckForValidListAndQueue+0x64>)
 8008616:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008618:	4b12      	ldr	r3, [pc, #72]	; (8008664 <prvCheckForValidListAndQueue+0x70>)
 800861a:	4a10      	ldr	r2, [pc, #64]	; (800865c <prvCheckForValidListAndQueue+0x68>)
 800861c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800861e:	2300      	movs	r3, #0
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	4b11      	ldr	r3, [pc, #68]	; (8008668 <prvCheckForValidListAndQueue+0x74>)
 8008624:	4a11      	ldr	r2, [pc, #68]	; (800866c <prvCheckForValidListAndQueue+0x78>)
 8008626:	2110      	movs	r1, #16
 8008628:	200a      	movs	r0, #10
 800862a:	f7fe f887 	bl	800673c <xQueueGenericCreateStatic>
 800862e:	4603      	mov	r3, r0
 8008630:	4a08      	ldr	r2, [pc, #32]	; (8008654 <prvCheckForValidListAndQueue+0x60>)
 8008632:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <prvCheckForValidListAndQueue+0x60>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <prvCheckForValidListAndQueue+0x60>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	490b      	ldr	r1, [pc, #44]	; (8008670 <prvCheckForValidListAndQueue+0x7c>)
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fd5a 	bl	80070fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008648:	f000 f974 	bl	8008934 <vPortExitCritical>
}
 800864c:	bf00      	nop
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20001208 	.word	0x20001208
 8008658:	200011d8 	.word	0x200011d8
 800865c:	200011ec 	.word	0x200011ec
 8008660:	20001200 	.word	0x20001200
 8008664:	20001204 	.word	0x20001204
 8008668:	200012b4 	.word	0x200012b4
 800866c:	20001214 	.word	0x20001214
 8008670:	08008f94 	.word	0x08008f94

08008674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3b04      	subs	r3, #4
 8008684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800868c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3b04      	subs	r3, #4
 8008692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f023 0201 	bic.w	r2, r3, #1
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3b04      	subs	r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086a4:	4a0c      	ldr	r2, [pc, #48]	; (80086d8 <pxPortInitialiseStack+0x64>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3b14      	subs	r3, #20
 80086ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3b04      	subs	r3, #4
 80086ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f06f 0202 	mvn.w	r2, #2
 80086c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3b20      	subs	r3, #32
 80086c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086ca:	68fb      	ldr	r3, [r7, #12]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	080086dd 	.word	0x080086dd

080086dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086e6:	4b12      	ldr	r3, [pc, #72]	; (8008730 <prvTaskExitError+0x54>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d00a      	beq.n	8008706 <prvTaskExitError+0x2a>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	60fb      	str	r3, [r7, #12]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <prvTaskExitError+0x28>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	60bb      	str	r3, [r7, #8]
}
 8008718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800871a:	bf00      	nop
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0fc      	beq.n	800871c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008722:	bf00      	nop
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	2000000c 	.word	0x2000000c
	...

08008740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <pxCurrentTCBConst2>)
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	6808      	ldr	r0, [r1, #0]
 8008746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	f380 8809 	msr	PSP, r0
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f04f 0000 	mov.w	r0, #0
 8008756:	f380 8811 	msr	BASEPRI, r0
 800875a:	4770      	bx	lr
 800875c:	f3af 8000 	nop.w

08008760 <pxCurrentTCBConst2>:
 8008760:	20000cd8 	.word	0x20000cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop

08008768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008768:	4808      	ldr	r0, [pc, #32]	; (800878c <prvPortStartFirstTask+0x24>)
 800876a:	6800      	ldr	r0, [r0, #0]
 800876c:	6800      	ldr	r0, [r0, #0]
 800876e:	f380 8808 	msr	MSP, r0
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8814 	msr	CONTROL, r0
 800877a:	b662      	cpsie	i
 800877c:	b661      	cpsie	f
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	df00      	svc	0
 8008788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800878a:	bf00      	nop
 800878c:	e000ed08 	.word	0xe000ed08

08008790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008796:	4b46      	ldr	r3, [pc, #280]	; (80088b0 <xPortStartScheduler+0x120>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a46      	ldr	r2, [pc, #280]	; (80088b4 <xPortStartScheduler+0x124>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10a      	bne.n	80087b6 <xPortStartScheduler+0x26>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	613b      	str	r3, [r7, #16]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087b6:	4b3e      	ldr	r3, [pc, #248]	; (80088b0 <xPortStartScheduler+0x120>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3f      	ldr	r2, [pc, #252]	; (80088b8 <xPortStartScheduler+0x128>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d10a      	bne.n	80087d6 <xPortStartScheduler+0x46>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60fb      	str	r3, [r7, #12]
}
 80087d2:	bf00      	nop
 80087d4:	e7fe      	b.n	80087d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087d6:	4b39      	ldr	r3, [pc, #228]	; (80088bc <xPortStartScheduler+0x12c>)
 80087d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	22ff      	movs	r2, #255	; 0xff
 80087e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	4b31      	ldr	r3, [pc, #196]	; (80088c0 <xPortStartScheduler+0x130>)
 80087fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087fe:	4b31      	ldr	r3, [pc, #196]	; (80088c4 <xPortStartScheduler+0x134>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008804:	e009      	b.n	800881a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008806:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <xPortStartScheduler+0x134>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3b01      	subs	r3, #1
 800880c:	4a2d      	ldr	r2, [pc, #180]	; (80088c4 <xPortStartScheduler+0x134>)
 800880e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008822:	2b80      	cmp	r3, #128	; 0x80
 8008824:	d0ef      	beq.n	8008806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008826:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <xPortStartScheduler+0x134>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f1c3 0307 	rsb	r3, r3, #7
 800882e:	2b04      	cmp	r3, #4
 8008830:	d00a      	beq.n	8008848 <xPortStartScheduler+0xb8>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	60bb      	str	r3, [r7, #8]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008848:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <xPortStartScheduler+0x134>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	4a1d      	ldr	r2, [pc, #116]	; (80088c4 <xPortStartScheduler+0x134>)
 8008850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008852:	4b1c      	ldr	r3, [pc, #112]	; (80088c4 <xPortStartScheduler+0x134>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800885a:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <xPortStartScheduler+0x134>)
 800885c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	b2da      	uxtb	r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008866:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <xPortStartScheduler+0x138>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <xPortStartScheduler+0x138>)
 800886c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <xPortStartScheduler+0x138>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a14      	ldr	r2, [pc, #80]	; (80088c8 <xPortStartScheduler+0x138>)
 8008878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800887c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800887e:	f000 f8dd 	bl	8008a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <xPortStartScheduler+0x13c>)
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008888:	f000 f8fc 	bl	8008a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xPortStartScheduler+0x140>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0f      	ldr	r2, [pc, #60]	; (80088d0 <xPortStartScheduler+0x140>)
 8008892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008898:	f7ff ff66 	bl	8008768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800889c:	f7ff f850 	bl	8007940 <vTaskSwitchContext>
	prvTaskExitError();
 80088a0:	f7ff ff1c 	bl	80086dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	e000ed00 	.word	0xe000ed00
 80088b4:	410fc271 	.word	0x410fc271
 80088b8:	410fc270 	.word	0x410fc270
 80088bc:	e000e400 	.word	0xe000e400
 80088c0:	20001304 	.word	0x20001304
 80088c4:	20001308 	.word	0x20001308
 80088c8:	e000ed20 	.word	0xe000ed20
 80088cc:	2000000c 	.word	0x2000000c
 80088d0:	e000ef34 	.word	0xe000ef34

080088d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	607b      	str	r3, [r7, #4]
}
 80088ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088ee:	4b0f      	ldr	r3, [pc, #60]	; (800892c <vPortEnterCritical+0x58>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	4a0d      	ldr	r2, [pc, #52]	; (800892c <vPortEnterCritical+0x58>)
 80088f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088f8:	4b0c      	ldr	r3, [pc, #48]	; (800892c <vPortEnterCritical+0x58>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d10f      	bne.n	8008920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <vPortEnterCritical+0x5c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <vPortEnterCritical+0x4c>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	603b      	str	r3, [r7, #0]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <vPortEnterCritical+0x4a>
	}
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	2000000c 	.word	0x2000000c
 8008930:	e000ed04 	.word	0xe000ed04

08008934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800893a:	4b12      	ldr	r3, [pc, #72]	; (8008984 <vPortExitCritical+0x50>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <vPortExitCritical+0x24>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	607b      	str	r3, [r7, #4]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <vPortExitCritical+0x50>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3b01      	subs	r3, #1
 800895e:	4a09      	ldr	r2, [pc, #36]	; (8008984 <vPortExitCritical+0x50>)
 8008960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008962:	4b08      	ldr	r3, [pc, #32]	; (8008984 <vPortExitCritical+0x50>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d105      	bne.n	8008976 <vPortExitCritical+0x42>
 800896a:	2300      	movs	r3, #0
 800896c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	f383 8811 	msr	BASEPRI, r3
}
 8008974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	2000000c 	.word	0x2000000c
	...

08008990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008990:	f3ef 8009 	mrs	r0, PSP
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <pxCurrentTCBConst>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	f01e 0f10 	tst.w	lr, #16
 80089a0:	bf08      	it	eq
 80089a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089b4:	f380 8811 	msr	BASEPRI, r0
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f7fe ffbe 	bl	8007940 <vTaskSwitchContext>
 80089c4:	f04f 0000 	mov.w	r0, #0
 80089c8:	f380 8811 	msr	BASEPRI, r0
 80089cc:	bc09      	pop	{r0, r3}
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	6808      	ldr	r0, [r1, #0]
 80089d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d6:	f01e 0f10 	tst.w	lr, #16
 80089da:	bf08      	it	eq
 80089dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089e0:	f380 8809 	msr	PSP, r0
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst>:
 80089f0:	20000cd8 	.word	0x20000cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	607b      	str	r3, [r7, #4]
}
 8008a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a12:	f7fe fedb 	bl	80077cc <xTaskIncrementTick>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <xPortSysTickHandler+0x40>)
 8008a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f383 8811 	msr	BASEPRI, r3
}
 8008a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a40:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <vPortSetupTimerInterrupt+0x34>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <vPortSetupTimerInterrupt+0x38>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <vPortSetupTimerInterrupt+0x3c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a0a      	ldr	r2, [pc, #40]	; (8008a7c <vPortSetupTimerInterrupt+0x40>)
 8008a52:	fba2 2303 	umull	r2, r3, r2, r3
 8008a56:	099b      	lsrs	r3, r3, #6
 8008a58:	4a09      	ldr	r2, [pc, #36]	; (8008a80 <vPortSetupTimerInterrupt+0x44>)
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a5e:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <vPortSetupTimerInterrupt+0x34>)
 8008a60:	2207      	movs	r2, #7
 8008a62:	601a      	str	r2, [r3, #0]
}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	e000e010 	.word	0xe000e010
 8008a74:	e000e018 	.word	0xe000e018
 8008a78:	20000000 	.word	0x20000000
 8008a7c:	10624dd3 	.word	0x10624dd3
 8008a80:	e000e014 	.word	0xe000e014

08008a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a94 <vPortEnableVFP+0x10>
 8008a88:	6801      	ldr	r1, [r0, #0]
 8008a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a8e:	6001      	str	r1, [r0, #0]
 8008a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a92:	bf00      	nop
 8008a94:	e000ed88 	.word	0xe000ed88

08008a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a9e:	f3ef 8305 	mrs	r3, IPSR
 8008aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	d914      	bls.n	8008ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008aaa:	4a17      	ldr	r2, [pc, #92]	; (8008b08 <vPortValidateInterruptPriority+0x70>)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ab4:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <vPortValidateInterruptPriority+0x74>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	7afa      	ldrb	r2, [r7, #11]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d20a      	bcs.n	8008ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	607b      	str	r3, [r7, #4]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <vPortValidateInterruptPriority+0x78>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <vPortValidateInterruptPriority+0x7c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d90a      	bls.n	8008afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	603b      	str	r3, [r7, #0]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <vPortValidateInterruptPriority+0x60>
	}
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	e000e3f0 	.word	0xe000e3f0
 8008b0c:	20001304 	.word	0x20001304
 8008b10:	e000ed0c 	.word	0xe000ed0c
 8008b14:	20001308 	.word	0x20001308

08008b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	; 0x28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b24:	f7fe fd84 	bl	8007630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b28:	4b5b      	ldr	r3, [pc, #364]	; (8008c98 <pvPortMalloc+0x180>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b30:	f000 f920 	bl	8008d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b34:	4b59      	ldr	r3, [pc, #356]	; (8008c9c <pvPortMalloc+0x184>)
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 8093 	bne.w	8008c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d01d      	beq.n	8008b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b48:	2208      	movs	r2, #8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d014      	beq.n	8008b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f023 0307 	bic.w	r3, r3, #7
 8008b60:	3308      	adds	r3, #8
 8008b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <pvPortMalloc+0x6c>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	617b      	str	r3, [r7, #20]
}
 8008b80:	bf00      	nop
 8008b82:	e7fe      	b.n	8008b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d06e      	beq.n	8008c68 <pvPortMalloc+0x150>
 8008b8a:	4b45      	ldr	r3, [pc, #276]	; (8008ca0 <pvPortMalloc+0x188>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d869      	bhi.n	8008c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b94:	4b43      	ldr	r3, [pc, #268]	; (8008ca4 <pvPortMalloc+0x18c>)
 8008b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b98:	4b42      	ldr	r3, [pc, #264]	; (8008ca4 <pvPortMalloc+0x18c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b9e:	e004      	b.n	8008baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d903      	bls.n	8008bbc <pvPortMalloc+0xa4>
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1f1      	bne.n	8008ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bbc:	4b36      	ldr	r3, [pc, #216]	; (8008c98 <pvPortMalloc+0x180>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d050      	beq.n	8008c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2208      	movs	r2, #8
 8008bcc:	4413      	add	r3, r2
 8008bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	2308      	movs	r3, #8
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d91f      	bls.n	8008c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <pvPortMalloc+0xf8>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	613b      	str	r3, [r7, #16]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c22:	69b8      	ldr	r0, [r7, #24]
 8008c24:	f000 f908 	bl	8008e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c28:	4b1d      	ldr	r3, [pc, #116]	; (8008ca0 <pvPortMalloc+0x188>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	4a1b      	ldr	r2, [pc, #108]	; (8008ca0 <pvPortMalloc+0x188>)
 8008c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c36:	4b1a      	ldr	r3, [pc, #104]	; (8008ca0 <pvPortMalloc+0x188>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <pvPortMalloc+0x190>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d203      	bcs.n	8008c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c42:	4b17      	ldr	r3, [pc, #92]	; (8008ca0 <pvPortMalloc+0x188>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <pvPortMalloc+0x190>)
 8008c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <pvPortMalloc+0x184>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c5e:	4b13      	ldr	r3, [pc, #76]	; (8008cac <pvPortMalloc+0x194>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	4a11      	ldr	r2, [pc, #68]	; (8008cac <pvPortMalloc+0x194>)
 8008c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c68:	f7fe fcf0 	bl	800764c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <pvPortMalloc+0x174>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60fb      	str	r3, [r7, #12]
}
 8008c88:	bf00      	nop
 8008c8a:	e7fe      	b.n	8008c8a <pvPortMalloc+0x172>
	return pvReturn;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3728      	adds	r7, #40	; 0x28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20004f14 	.word	0x20004f14
 8008c9c:	20004f28 	.word	0x20004f28
 8008ca0:	20004f18 	.word	0x20004f18
 8008ca4:	20004f0c 	.word	0x20004f0c
 8008ca8:	20004f1c 	.word	0x20004f1c
 8008cac:	20004f20 	.word	0x20004f20

08008cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d04d      	beq.n	8008d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cc2:	2308      	movs	r3, #8
 8008cc4:	425b      	negs	r3, r3
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4413      	add	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	4b24      	ldr	r3, [pc, #144]	; (8008d68 <vPortFree+0xb8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <vPortFree+0x44>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	60fb      	str	r3, [r7, #12]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <vPortFree+0x62>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	60bb      	str	r3, [r7, #8]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <vPortFree+0xb8>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01e      	beq.n	8008d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d11a      	bne.n	8008d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <vPortFree+0xb8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	43db      	mvns	r3, r3
 8008d32:	401a      	ands	r2, r3
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d38:	f7fe fc7a 	bl	8007630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <vPortFree+0xbc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4413      	add	r3, r2
 8008d46:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <vPortFree+0xbc>)
 8008d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d4a:	6938      	ldr	r0, [r7, #16]
 8008d4c:	f000 f874 	bl	8008e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <vPortFree+0xc0>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	4a06      	ldr	r2, [pc, #24]	; (8008d70 <vPortFree+0xc0>)
 8008d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d5a:	f7fe fc77 	bl	800764c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d5e:	bf00      	nop
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20004f28 	.word	0x20004f28
 8008d6c:	20004f18 	.word	0x20004f18
 8008d70:	20004f24 	.word	0x20004f24

08008d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d80:	4b27      	ldr	r3, [pc, #156]	; (8008e20 <prvHeapInit+0xac>)
 8008d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3307      	adds	r3, #7
 8008d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0307 	bic.w	r3, r3, #7
 8008d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <prvHeapInit+0xac>)
 8008da4:	4413      	add	r3, r2
 8008da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dac:	4a1d      	ldr	r2, [pc, #116]	; (8008e24 <prvHeapInit+0xb0>)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008db2:	4b1c      	ldr	r3, [pc, #112]	; (8008e24 <prvHeapInit+0xb0>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0307 	bic.w	r3, r3, #7
 8008dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <prvHeapInit+0xb4>)
 8008dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dd6:	4b14      	ldr	r3, [pc, #80]	; (8008e28 <prvHeapInit+0xb4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dde:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <prvHeapInit+0xb4>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008df4:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <prvHeapInit+0xb4>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	4a0a      	ldr	r2, [pc, #40]	; (8008e2c <prvHeapInit+0xb8>)
 8008e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <prvHeapInit+0xbc>)
 8008e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <prvHeapInit+0xc0>)
 8008e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e12:	601a      	str	r2, [r3, #0]
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	2000130c 	.word	0x2000130c
 8008e24:	20004f0c 	.word	0x20004f0c
 8008e28:	20004f14 	.word	0x20004f14
 8008e2c:	20004f1c 	.word	0x20004f1c
 8008e30:	20004f18 	.word	0x20004f18
 8008e34:	20004f28 	.word	0x20004f28

08008e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e40:	4b28      	ldr	r3, [pc, #160]	; (8008ee4 <prvInsertBlockIntoFreeList+0xac>)
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e002      	b.n	8008e4c <prvInsertBlockIntoFreeList+0x14>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d8f7      	bhi.n	8008e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	4413      	add	r3, r2
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d108      	bne.n	8008e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	441a      	add	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	441a      	add	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d118      	bne.n	8008ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d00d      	beq.n	8008eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	441a      	add	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	e008      	b.n	8008ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	e003      	b.n	8008ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d002      	beq.n	8008ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20004f0c 	.word	0x20004f0c
 8008ee8:	20004f14 	.word	0x20004f14

08008eec <__libc_init_array>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	4d0d      	ldr	r5, [pc, #52]	; (8008f24 <__libc_init_array+0x38>)
 8008ef0:	4c0d      	ldr	r4, [pc, #52]	; (8008f28 <__libc_init_array+0x3c>)
 8008ef2:	1b64      	subs	r4, r4, r5
 8008ef4:	10a4      	asrs	r4, r4, #2
 8008ef6:	2600      	movs	r6, #0
 8008ef8:	42a6      	cmp	r6, r4
 8008efa:	d109      	bne.n	8008f10 <__libc_init_array+0x24>
 8008efc:	4d0b      	ldr	r5, [pc, #44]	; (8008f2c <__libc_init_array+0x40>)
 8008efe:	4c0c      	ldr	r4, [pc, #48]	; (8008f30 <__libc_init_array+0x44>)
 8008f00:	f000 f82e 	bl	8008f60 <_init>
 8008f04:	1b64      	subs	r4, r4, r5
 8008f06:	10a4      	asrs	r4, r4, #2
 8008f08:	2600      	movs	r6, #0
 8008f0a:	42a6      	cmp	r6, r4
 8008f0c:	d105      	bne.n	8008f1a <__libc_init_array+0x2e>
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f14:	4798      	blx	r3
 8008f16:	3601      	adds	r6, #1
 8008f18:	e7ee      	b.n	8008ef8 <__libc_init_array+0xc>
 8008f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1e:	4798      	blx	r3
 8008f20:	3601      	adds	r6, #1
 8008f22:	e7f2      	b.n	8008f0a <__libc_init_array+0x1e>
 8008f24:	08008ff4 	.word	0x08008ff4
 8008f28:	08008ff4 	.word	0x08008ff4
 8008f2c:	08008ff4 	.word	0x08008ff4
 8008f30:	08008ff8 	.word	0x08008ff8

08008f34 <memcpy>:
 8008f34:	440a      	add	r2, r1
 8008f36:	4291      	cmp	r1, r2
 8008f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f3c:	d100      	bne.n	8008f40 <memcpy+0xc>
 8008f3e:	4770      	bx	lr
 8008f40:	b510      	push	{r4, lr}
 8008f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f4a:	4291      	cmp	r1, r2
 8008f4c:	d1f9      	bne.n	8008f42 <memcpy+0xe>
 8008f4e:	bd10      	pop	{r4, pc}

08008f50 <memset>:
 8008f50:	4402      	add	r2, r0
 8008f52:	4603      	mov	r3, r0
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d100      	bne.n	8008f5a <memset+0xa>
 8008f58:	4770      	bx	lr
 8008f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5e:	e7f9      	b.n	8008f54 <memset+0x4>

08008f60 <_init>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr

08008f6c <_fini>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr
